{"version":3,"sources":["logo.svg","mineSweeperGame/consts/consts.js","mineSweeperGame/storage/storageController.js","mineSweeperGame/utils/utils.js","mineSweeperGame/MineSweeperStore.js","mineSweeperGame/assets/RedFlag.js","mineSweeperGame/assets/Bomb.js","mineSweeperGame/components/GameTile.jsx","mineSweeperGame/components/GameBoard.jsx","mineSweeperGame/components/GameSettings.jsx","mineSweeperGame/components/FlagsLeft.jsx","mineSweeperGame/components/AlertDialog.jsx","mineSweeperGame/components/SupermanCheckbox.jsx","mineSweeperGame/components/TopBar.jsx","mineSweeperGame/MineSweeperGame.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BREAK_LOOP","TILE_TYPE","CLICKED","UNCLICKED","FLAG","REVEALED_MINE","MIN_BOARD_WIDTH","MIN_BOARD_HEIGHT","MIN_TILE_SIZE","MAX_OBJ_SIZE_IN_DB","MAX_WIDTH","MAX_HEIGHT","getNumberOfEntries","CC","localforage","getAllCCforCCkey","key","clearStorage","_clearStorage","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","sessionStorage","clear","stop","getSetOfRandomsInRange","min","max","n","resultSet","Set","counter","size","add","getRandomInt","Math","ceil","floor","random","getKey","i","j","concat","flushCCCells","CCCells","CCgroup","Object","keys","length","saveCCGroup","getBoundreis","row","column","height","width","top","bottom","right","left","MineSweeperStore","_class","_this","classCallCheck","initializerDefineProperty","_descriptor","minesLocation","clickedCells","flaggedCells","correctFlags","_descriptor2","_descriptor3","_descriptor4","_descriptor5","boardSize","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","emptyCellsMapped","minesNumber","_descriptor11","index2CC","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","shouldVisitCell","calculateAdjMines","solveGame","asyncToGenerator","mark","_callee2","CCKey","solveGameScheduler","_context2","_ref2","markConnectedComponnetsSolve","abrupt","Promise","resolve","reject","setTimeout","then","r","chooseBetweenMinesAndEmptyCells","boundary","mineCount","isAMine","visitedCells","undefined","parts","numOfCCItems","push","indexKey","toString","loops","cellIndex","shift","storageKey","setNumberOfEntries","cell","x","getCCid","isCCForCellinStorage","_ref3","_callee3","_context3","t0","sent","_x","cleanUpAfterFlagRemoved","openedCells","isFlagCorrect","cellAlreadyRevealed","handleClickTileI","toggleFlag","shouldRevealBoard","increaseClicks","handleClickMine","handleClickUnrevealedTile","emptyCellsLocation","has","placeMines","placeEmptyCells","computeCell","loading","clicked","createClass","value","flags","superman","won","lost","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this2","_callee4","_context4","numberOfClicks","wrongParams","_this3","_ref5","_callee5","_context5","clearAll","_x2","_x3","_x4","_this4","displayWaring","_this5","_ref6","_callee6","_key2","cc","_context6","assign","_x5","_x6","_this6","clickCell","_this7","_this8","_this9","_this10","_this11","_ref7","_callee7","_context7","clickAllCCfromStorage","clickConnectedCells","_x7","_x8","_this12","_this13","isValidGameParams","setLoading","setBoardParams","initGameState","res","_this14","_this15","removeFlag","remainingFlags","addFlag","_this16","_this17","shiftPressed","_this18","_this19","console","log","RedFlag","props","react","id","y","viewBox","style","enableBackground","fill","d","cx","cy","Bomb","stroke","strokeWidth","strokeMiterlimit","points","styles","theme","tile","textAlign","display","justifyContent","alignItems","boxSizing","userSelect","unrevealedTile","&:hover","backgroundColor","unrevealed0","unrevealed1","emptyTile","empty0","empty1","revealed","adj1","color","adj2","adj3","adj4","adj5","FlaggedTile","UnrevealedTile","colorType","RedFlag_RedFlag","MineTile","Bomb_Bomb","withStyles","classes","colorClass","className","join","children","EmptyTile","ClickedTile","adjMines","GameTile","_React$PureComponent","possibleConstructorReturn","getPrototypeOf","inherits","cellState","GameTile_FlaggedTile","GameTile_MineTile","adj","React","GameBoard","inject","observer","cellRenderer","_ref","columnIndex","rowIndex","GameStore","cellType","GameTile_GameTile","store","tableH","tableW","numClicks","TILE_SIZE","tileWidth","tileHeight","getTileSize","es","columnCount","outline","padding","WebkitScrollBar","rowCount","columnWidth","rowHeight","clicks","GameSettings","root","flexDirection","onKeyPress","ev","handleNewGame","TextField_default","label","placeholder","type","multiline","margin","gameWidth","onChange","handleInput","gameHeight","mines","FlagsLeft","fontFamily","fontSize","whiteSpace","AlertDialog","dialogPaper","minHeight","maxHeight","minWidth","maxWidth","opacity","border","borderWidth","_this$props","text","title","react_default","createElement","Dialog_default","open","onClose","handleClose","aria-labelledby","aria-describedby","paper","DialogTitle_default","DialogContent_default","DialogContentText_default","dialog","DialogActions_default","Button_default","onClick","handleOk","Component","Superman","paddingLeft","position","cursor","FormControlLabel_default","control","Checkbox_default","toggle","icon","FavoriteBorder_default","checkedIcon","Favorite_default","checked","TopBar","alignitems","background","MineSweeperGame","gridTemplateColumns","gameSettings","gridColumn","gridRow","state","startGame","newGame","handleTileClick","target","closest","_tile$id$split","split","_tile$id$split2","slicedToArray","handleClickTileAndCheckWin","parseInt","shiftKey","e","val","setState","defineProperty","NotValidDialog","components_AlertDialog","closeParamsDialog","WonDialog","LostDialog","NoFlagsDialog","hideWarning","toggleSuperman","LinearProgress_default","components_GameBoard","gameStore","MineSweeper","index_module","mineSweeperGame_MineSweeperGame","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57f67945.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nexport const BREAK_LOOP=400;\r\n\r\nexport const TILE_TYPE = {\r\n    CLICKED: \"click\",\r\n    UNCLICKED: \"notClicked\",\r\n    FLAG: \"flag\",\r\n    REVEALED_MINE: \"mine\",\r\n}\r\n\r\nexport const  MIN_BOARD_WIDTH=400\r\nexport const  MIN_BOARD_HEIGHT=400\r\nexport const MIN_TILE_SIZE=30\r\n\r\nexport const MAX_OBJ_SIZE_IN_DB = 5000;\r\n\r\nexport const MAX_WIDTH=300;\r\nexport const MAX_HEIGHT=300;\r\n","import * as localforage from \"localforage\";\r\n\r\n// export function setCCGroupForCell(key,CC) {\r\n//     sessionStorage.setItem(key, CC)\r\n// }\r\n//\r\n// export function getCCGroupForCell(key) {\r\n//     return sessionStorage.getItem(key)\r\n// }\r\n\r\nexport function getNumberOfEntries(CC) {\r\n    return localforage.getItem(CC)\r\n}\r\nexport function setNumberOfEntries(CC,parts) {\r\n\r\n    localforage.setItem(CC, parts);\r\n}\r\n\r\nexport function getAllCCforCCkey(key) {\r\n  return  localforage.getItem(key);\r\n}\r\nexport function saveCCGroup(key,CCgroup) {\r\n    if(Object.keys(CCgroup).length<2){\r\n        debugger\r\n    }\r\n    localforage.setItem(key, CCgroup);\r\n}\r\n\r\n\r\nexport async function clearStorage() {\r\n  await localforage.clear();\r\n    sessionStorage.clear();\r\n}","import {MAX_HEIGHT, MAX_WIDTH} from \"../consts/consts\";\r\nimport {saveCCGroup} from \"../storage/storageController\";\r\n\r\nexport function getSetOfRandomsInRange(min, max, n) {\r\n    if (max - min < n) {\r\n        return;\r\n    }\r\n    const resultSet = new Set();\r\n    let counter = 0;\r\n    while (resultSet.size < n) {\r\n        resultSet.add(getRandomInt(min, max + 1));\r\n        counter++;\r\n        if (counter > n * 100000) {\r\n            throw \"Something went very wrong\"  // counter is just for safety, getRandomInt should work\r\n        }\r\n    }\r\n    return resultSet\r\n}\r\n\r\nexport function getRandomInt(min, max) { //stolen from developer.mozilla\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nexport function getKey(i, j) {\r\n    const key = `${i}-${j}`;\r\n    return key\r\n}\r\n\r\nexport function isValidGameParams(width, height, minesNumber) {\r\n    return width < MAX_WIDTH + 1 && height < MAX_HEIGHT + 1\r\n        && minesNumber < width * height && width > 0 && height > 0 && minesNumber > 0\r\n}\r\n\r\n\r\nexport function flushCCCells(key, CCCells) {\r\n    saveCCGroup(key, CCCells);\r\n}\r\n\r\nexport function getBoundreis(row, column, height, width) {\r\n    return {\r\n        top: Math.max(0, row - 1),\r\n        bottom: Math.min(row + 1, height - 1),\r\n        right: Math.min(column + 1, width - 1),\r\n        left: Math.max(0, column - 1),\r\n    }\r\n}\r\n","import {action, observable} from \"mobx\";\r\nimport {flushCCCells, getBoundreis, getKey, getSetOfRandomsInRange, isValidGameParams} from \"./utils/utils\";\r\nimport {clearStorage, getAllCCforCCkey, getNumberOfEntries, setNumberOfEntries} from \"./storage/storageController\";\r\nimport {BREAK_LOOP, MAX_HEIGHT, MAX_OBJ_SIZE_IN_DB, MAX_WIDTH, TILE_TYPE} from \"./consts/consts\";\r\n\r\n\r\nexport class MineSweeperStore {\r\n\r\n    @observable superman = false;\r\n    minesLocation = new Set();\r\n    clickedCells = {}\r\n    flaggedCells = {}\r\n    correctFlags = 0;\r\n    @observable flags = 0;\r\n    @observable openedCells = 0;\r\n    @observable numberOfClicks = 0;\r\n    @observable gameNumber = 0;\r\n    boardSize = -1;\r\n    @observable width = -1;\r\n    @observable height = -1;\r\n    @observable loading = false;\r\n    @observable displayWaring = false;\r\n    @observable lost = false;\r\n    emptyCellsMapped = false\r\n    minesNumber = 0\r\n    @observable won = false\r\n    index2CC = {}\r\n    @observable wrongParams = false\r\n\r\n    @action clearAll = async () => {\r\n        this.clickedCells = {};\r\n        this.minesLocation = {};\r\n        this.emptyCellsLocation = {};\r\n        this.flaggedCells = {};\r\n        this.index2CC = {};\r\n        this.flags = 0;\r\n        this.won = false\r\n        this.correctFlags = 0;\r\n        this.openedCells = 0;\r\n        this.numberOfClicks = 0;\r\n        this.lost = false;\r\n        this.wrongParams = false\r\n        await clearStorage();\r\n    };\r\n\r\n    @action initGameState = async (width, height, minesNumber) => {\r\n        await this.clearAll();\r\n        const minesMapping = this.emptyCellsMapped ? this.placeEmptyCells : this.placeMines\r\n        minesMapping(width, height, minesNumber)\r\n        return this.solveGame()\r\n\r\n    };\r\n\r\n\r\n    @action hideWarning = () => {\r\n        this.displayWaring = false\r\n    }\r\n\r\n\r\n\r\n    @action clickAllCCfromStorage = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        const CC = this.index2CC[key]\r\n        const parts = await getNumberOfEntries(CC)\r\n\r\n        for (let i = 1; i <= parts; i++) {\r\n            const key = `${CC}-${i}`\r\n            const cc = await getAllCCforCCkey(key)\r\n            Object.assign(this.clickedCells, cc)\r\n        }\r\n        this.numberOfClicks++;\r\n    };\r\n\r\n    @action clickConnectedCells = (row, column) => {\r\n        const visitedCells = [];\r\n        visitedCells.push({row, column});\r\n        this.clickCell(getKey(row, column));\r\n        while (visitedCells.length > 0) {\r\n            const cellIndex = visitedCells.shift()\r\n            const {row, column} = cellIndex\r\n            const boundary = getBoundreis(row, column, this.height, this.width);\r\n\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j)\r\n                    if (this.shouldVisitCell(key, i, j)) {\r\n                        visitedCells.push({row: i, column: j})\r\n                    }\r\n                    this.clickCell(key)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clickCell = (key) => {\r\n        this.clickedCells[key] = true\r\n        this.increaseClicks();\r\n    }\r\n\r\n    @action toggleSuperman = () => {\r\n        this.superman = !this.superman\r\n    };\r\n\r\n    @action handleClickMine = () => {\r\n        this.lost = true;\r\n    };\r\n\r\n    @action closeParamsDialog = () => {\r\n        this.wrongParams = false\r\n    };\r\n    @action handleClickUnrevealedTile = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        if (this.calculateAdjMines(row, column) === 0) {\r\n            const isInStorage = await this.isCCForCellinStorage(key)\r\n            if (isInStorage) {\r\n                this.clickAllCCfromStorage(row, column)\r\n            } else {\r\n                this.clickConnectedCells(row, column)\r\n            }\r\n        }\r\n        this.clickedCells[key] = true;\r\n        this.openedCells = Object.keys(this.clickedCells).length\r\n    };\r\n\r\n    @action removeFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            this.correctFlags--\r\n        }\r\n        delete this.flaggedCells[key];\r\n        this.flags--;\r\n        this.cleanUpAfterFlagRemoved(key)\r\n    }\r\n\r\n    @action newGame = (width, height, minesNumber) => {\r\n        if (!isValidGameParams(width, height, minesNumber)) {\r\n            this.wrongParams = true\r\n            return\r\n        }\r\n        this.chooseBetweenMinesAndEmptyCells(minesNumber)\r\n        this.setLoading(true)\r\n        this.setBoardParams(width, height,minesNumber);\r\n        this.initGameState(width, height, minesNumber).then(res => {\r\n                this.setLoading(false)\r\n            }\r\n        )\r\n    };\r\n\r\n    @action addFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            this.correctFlags++;\r\n        }\r\n        this.flags++\r\n        this.flaggedCells[key] = true\r\n    }\r\n\r\n    @action\r\n    toggleFlag = (i, j) => {\r\n        const key = getKey(i, j);\r\n        const flagged = this.flaggedCells[key];\r\n        if (flagged) {\r\n            this.removeFlag(i, j)\r\n            return;\r\n        }\r\n        if (this.remainingFlags() > 0) {\r\n            this.addFlag(i, j)\r\n        } else {\r\n            this.displayWaring = true\r\n        }\r\n    };\r\n\r\n    @action increaseClicks = () => {\r\n        this.numberOfClicks++\r\n    };\r\n\r\n    @action handleClickTileAndCheckWin = (i, j, shiftPressed) => {\r\n        this.handleClickTileI(i, j, shiftPressed)\r\n        if ((this.correctFlags + this.openedCells) === this.boardSize) {\r\n            this.won = true\r\n        }\r\n    }\r\n\r\n    @action setLoading = (loading) => {\r\n        this.loading = loading\r\n    };\r\n\r\n    @action setBoardParams = (width, height, minesNumber) => {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.boardSize = width * height;\r\n        this.minesNumber = minesNumber;\r\n        console.log(minesNumber)\r\n    }\r\n\r\n    shouldVisitCell = (key, i, j) => {\r\n        return !this.clickedCells[key] && this.calculateAdjMines(i, j) === 0\r\n    }\r\n\r\n    solveGame = async () => {\r\n        let CCKey = 0;\r\n        const solveGameScheduler = async () => {\r\n            for (let i = 0; i < this.height; i++) {\r\n                for (let j = 0; j < this.width; j++) {\r\n                    CCKey++;\r\n                    if (!this.index2CC[(getKey(i, j))]) {\r\n                        await this.markConnectedComponnetsSolve(i, j, CCKey)\r\n                    }\r\n                }\r\n            }\r\n            return Promise.resolve(\"Game solved\")\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    solveGameScheduler().then(r => resolve(\"resolved\"))\r\n                }, 0);\r\n            }\r\n        )\r\n\r\n    };\r\n\r\n    chooseBetweenMinesAndEmptyCells = (minesNumber) => {\r\n        if (minesNumber > (MAX_HEIGHT * MAX_WIDTH) / 2) {\r\n            this.emptyCellsMapped = true\r\n        }\r\n    }\r\n\r\n    calculateAdjMines = (row, column) => {\r\n        const boundary = getBoundreis(row, column, this.height, this.width);\r\n        let mineCount = 0;\r\n        for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n            for (let j = boundary.left; j <= boundary.right; j++) {\r\n                if (this.isAMine(i, j)) {\r\n                    mineCount++;\r\n                }\r\n            }\r\n        }\r\n        return mineCount;\r\n    };\r\n\r\n    markConnectedComponnetsSolve = (row, column, CC, visitedCells = [], CCCells = {}, parts = 1, numOfCCItems = 0) => {\r\n        visitedCells.push({row, column})\r\n        const indexKey = getKey(row, column);\r\n        this.index2CC[indexKey] = CC.toString()\r\n        CCCells[indexKey] = true;\r\n        numOfCCItems++;\r\n        let loops = 0;\r\n        while (loops < BREAK_LOOP && visitedCells.length > 0) {\r\n            loops++;\r\n            const cellIndex = visitedCells.shift();\r\n            const {row, column} = cellIndex;\r\n            if (numOfCCItems > MAX_OBJ_SIZE_IN_DB) {\r\n                const key = `${CC}-${parts}`;\r\n                flushCCCells(key, CCCells)\r\n                CCCells = {};\r\n                parts++;\r\n                numOfCCItems = 0;\r\n            }\r\n            const boundary = getBoundreis(row, column, this.height, this.width)\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j);\r\n                    const isSaved = this.index2CC[key]\r\n                    if (!isSaved) {\r\n                        this.index2CC[key] = CC.toString()\r\n                        if (this.calculateAdjMines(i, j) === 0) {\r\n                            visitedCells.push({row: i, column: j})\r\n                        }\r\n                        CCCells[key] = true;\r\n                        numOfCCItems++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (visitedCells.length < 1) {\r\n            const storageKey = `${CC}-${parts}`;\r\n            if ((Object.keys(CCCells).length + ((parts - 1) * MAX_OBJ_SIZE_IN_DB)) >= MAX_OBJ_SIZE_IN_DB) {\r\n                flushCCCells(storageKey, CCCells);\r\n                setNumberOfEntries(CC.toString(), parts)\r\n            }\r\n            return new Promise((resolve, reject) => resolve(\"good promise\"))\r\n        }\r\n\r\n        const cell = visitedCells.shift()\r\n        return new Promise(resolve => setTimeout(() => {\r\n            this.markConnectedComponnetsSolve(cell.row,\r\n                cell.column, CC, visitedCells, CCCells, parts, numOfCCItems).then(x => resolve(x))\r\n        }, 0))\r\n\r\n    };\r\n\r\n    getCCid = (key) => {\r\n        return this.index2CC[key]\r\n    }\r\n\r\n    isCCForCellinStorage = async (key) => {\r\n        const CC = this.getCCid(key)\r\n        return CC && await getNumberOfEntries(CC)\r\n    }\r\n\r\n    cleanUpAfterFlagRemoved = (key) => {\r\n        if (this.clickedCells[key]) {\r\n            delete this.clickedCells[key]\r\n            this.openedCells--;\r\n        }\r\n    }\r\n\r\n    isFlagCorrect = (i, j) => {\r\n        return this.isAMine(i, j)\r\n    }\r\n\r\n\r\n    cellAlreadyRevealed = (key) => {\r\n       return this.clickedCells[key] && !this.flaggedCells[key]\r\n    }\r\n\r\n    handleClickTileI = (i, j, toggleFlag) => {\r\n        const key = getKey(i, j);\r\n        if (this.shouldRevealBoard() || this.cellAlreadyRevealed(key) || this.flaggedCells[key]) {\r\n            return\r\n        }\r\n        this.increaseClicks();\r\n        if (toggleFlag) {\r\n            this.toggleFlag(i, j);\r\n            return\r\n        }\r\n\r\n        if (this.isAMine(i, j)) {\r\n            this.handleClickMine(i, j);\r\n            return;\r\n        }\r\n        this.handleClickUnrevealedTile(i, j);\r\n    };\r\n\r\n    isAMine = (i, j) => {\r\n        return this.emptyCellsMapped ?\r\n            !this.emptyCellsLocation.has(i * this.width + j) : this.minesLocation.has(i * this.width + j)\r\n    };\r\n\r\n\r\n    remainingFlags() {\r\n        return this.minesNumber - this.flags\r\n    }\r\n\r\n    placeMines = (width, height, minesNumber) => {\r\n        this.minesLocation = getSetOfRandomsInRange(0, width * height - 1, minesNumber)\r\n    }\r\n\r\n    placeEmptyCells = (width, height, minesNumber) => {\r\n        const size = width * height\r\n        this.emptyCellsLocation = getSetOfRandomsInRange(0, width * height - 1, size - minesNumber)\r\n\r\n    };\r\n\r\n    computeCell = (i, j) => {\r\n        if (this.loading) {\r\n            return TILE_TYPE.UNCLICKED\r\n        }\r\n        const key = getKey(i, j)\r\n        const clicked = this.shouldRevealBoard() || this.clickedCells[key]\r\n\r\n        if (this.isAMine(i, j) && clicked) {\r\n            return TILE_TYPE.REVEALED_MINE\r\n        }\r\n        if (this.flaggedCells[key] && !this.shouldRevealBoard()) {\r\n            return TILE_TYPE.FLAG\r\n        }\r\n        return clicked ? TILE_TYPE.CLICKED : TILE_TYPE.UNCLICKED\r\n\r\n    }\r\n\r\n    shouldRevealBoard() {\r\n        return this.superman || this.won || this.lost\r\n    }\r\n\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const RedFlag = function (props) {\r\n    return <svg id=\"Layer_1\"\r\n                x=\"0px\" y=\"0px\" viewBox=\"0 0 511.999 511.999\" style={\r\n                    {enableBackground:\"new 0 0 511.999 511.999\",width:props.width,height:props.height}}>\r\n<path style={{fill:\"#E21B1B\"}}\r\n      d=\"M103.919,51.744c0,0,41.296,33.496,109.008,18.4c64.2-14.264,124.056-30.464,224.616,5.856v215.032  c0,0-92.488-44.104-176.736-24.432s-131.88,12.12-156.888-12.888\"/>\r\n        <rect x=\"90.74\" y=\"37.524\" style={{fill:\"#999999\"}} width=\"16\" height=\"474.475\"/>\r\n        <circle style={{fill:\"#666666\"}} cx=\"98.741\" cy=\"24.284\" r=\"24.284\"/>\r\n</svg>\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const Bomb=function (props) {\r\n  //  const {width=\"90%\",height=\"90%\"}={props}\r\n    return <svg  id=\"Layer_1\" x=\"0px\" y=\"0px\" width={props.width} height={props.height} viewBox=\"0 0 512 512\" enableBackground=\"new 0 0 512 512\" >\r\n<g>\r\n\t<path d=\"M218.255,131.197c16.958,0,33.379,2.285,48.987,6.542V91.448h-92.995v45.008   C188.357,133.027,203.091,131.197,218.255,131.197z\"/>\r\n    <circle fill=\"#020202\" cx=\"218.255\" cy=\"316.947\" r=\"171.502\"/>\r\n    <path fill=\"none\" stroke=\"#000000\" strokeWidth=\"10\" strokeMiterlimit=\"10\" d=\"M218.255,108.849c0,0-6.776-113.407,92.398-60   c79.104,42.599,117,17,117,17\"/>\r\n    <polygon points=\"422.598,23.551 430.759,46.499 452.756,36.042 442.3,58.04 465.247,66.2 442.3,74.36 452.756,96.358    430.759,85.901 422.598,108.849 414.438,85.901 392.441,96.358 402.897,74.36 379.948,66.2 402.897,58.04 392.441,36.042    414.438,46.499  \"/>\r\n</g>\r\n</svg>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"../assets/RedFlag\";\r\nimport {Bomb} from \"../assets/Bomb\";\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {TILE_TYPE} from \"../consts/consts\";\r\n\r\nconst styles = theme => ({\r\n        tile: {\r\n            textAlign: \"center\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            boxSizing: \"border-box\",\r\n            userSelect: \"none\"\r\n\r\n        },\r\n        unrevealedTile: {\r\n\r\n            '&:hover':\r\n                {\r\n                    backgroundColor: \"#b3e652\",\r\n                },\r\n        },\r\n        unrevealed0: {\r\n            backgroundColor: \"#a2d149\",\r\n        },\r\n        unrevealed1: {\r\n            backgroundColor: \"#aad751\",\r\n        },\r\n        emptyTile: {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n        empty0: {\r\n            backgroundColor: \"#d7b899\",\r\n        },\r\n        empty1: {\r\n            backgroundColor: \"#e5c29f\",\r\n        },\r\n        revealed: {\r\n            backgroundColor: \"#FFFAFA\"\r\n        },\r\n        adj1: {\r\n            color: \"#005EFF\"\r\n        },\r\n        adj2: {\r\n            color: \"#56CD56\"\r\n        },\r\n        adj3: {\r\n            color: \"#FFAB00\"\r\n        },\r\n        adj4: {\r\n            color: \"#FF3300\"\r\n        },\r\n        adj5: {\r\n            color: \"#FF0044\"\r\n        },\r\n\r\n    })\r\n;\r\n\r\n\r\nconst FlaggedTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><RedFlag width=\"70%\"/></UnrevealedTile>\r\n}\r\n\r\nconst MineTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><Bomb width=\"70%\"/></UnrevealedTile>\r\n}\r\n\r\nconst UnrevealedTile = withStyles(styles)(function (props) {\r\n    const colorType = props.colorType\r\n    const classes = props.classes\r\n    const colorClass = props.classes[`unrevealed${colorType}`]\r\n    return <div className={[classes.tile, classes.unrevealedTile, colorClass].join(' ')}>\r\n        {props.children}\r\n    </div>\r\n})\r\n\r\nconst EmptyTile = withStyles(styles)(function (props) {\r\n    const colorClass = props.classes[`empty${props.colorType}`]\r\n    return <div className={[props.classes.emptyTile, colorClass].join(' ')}>{props.children}</div>\r\n})\r\n\r\n\r\nconst ClickedTile = withStyles(styles)(function (props) {\r\n    const {adjMines} = props\r\n    const className = adjMines > 5 ? props.classes.adj5 : props.classes[`adj${adjMines}`]\r\n    return <div className={[props.classes.tile, className].join(\" \")}>\r\n        <EmptyTile colorType={props.colorType}>\r\n            {adjMines > 0 && adjMines}\r\n        </EmptyTile>\r\n    </div>\r\n})\r\n\r\nexport class GameTile extends React.PureComponent {\r\n    render() {\r\n        return (() => {\r\n            switch (this.props.cellState) {\r\n                case TILE_TYPE.FLAG:\r\n                    return <FlaggedTile colorType={this.props.colorType}/>;\r\n                case TILE_TYPE.REVEALED_MINE:\r\n                    return <MineTile colorType={this.props.colorType}/>\r\n                case TILE_TYPE.UNCLICKED:\r\n                    return <UnrevealedTile colorType={this.props.colorType}/>\r\n                case TILE_TYPE.CLICKED:\r\n                    return <ClickedTile colorType={this.props.colorType} adjMines={this.props.adj}/>;\r\n                default:\r\n                    return null;\r\n            }\r\n        })()\r\n    }\r\n\r\n};","import * as React from \"react\"\r\nimport {Grid} from \"react-virtualized\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {GameTile} from \"./GameTile\";\r\nimport {MIN_BOARD_HEIGHT, MIN_BOARD_WIDTH, MIN_TILE_SIZE, TILE_TYPE} from \"../consts/consts\";\r\n\r\n@inject('GameStore')\r\n@observer\r\nclass GameBoard extends React.Component {\r\n\r\n\r\n    cellRenderer = ({columnIndex, key, rowIndex, style}) => {\r\n        const {GameStore} = this.props\r\n        const cellType = GameStore.computeCell(rowIndex, columnIndex)\r\n        const adj = cellType === TILE_TYPE.CLICKED ? GameStore.calculateAdjMines(rowIndex, columnIndex) : -1;\r\n        const colorType = (rowIndex + columnIndex) % 2\r\n        return <div className=\"tile\" id={`${rowIndex}-${columnIndex}`} key={key} style={style}>\r\n            <GameTile colorType={colorType} adj={adj} cellState={cellType}/>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        const store = this.props.GameStore\r\n        const tableH = Math.min(store.height, 20)\r\n        const tableW = Math.min(store.width, 20)\r\n        const superman = store.superman\r\n        const numClicks = store.numberOfClicks // this is for rerender\r\n        const TILE_SIZE = getTileSize(tableW, tableH)\r\n\r\n        return <Grid cellRenderer={this.cellRenderer}\r\n                     columnCount={store.width}\r\n                     style={{outline: 'none', padding: \"0 18px 18px 0\",WebkitScrollBar:\"{background-color: #F5F5F5\"}}\r\n                     rowCount={store.height}\r\n                     columnWidth={TILE_SIZE}\r\n                     height={tableH * TILE_SIZE}\r\n                     width={tableW * TILE_SIZE}\r\n                     rowHeight={TILE_SIZE}\r\n                     clicks={numClicks}\r\n                     superman={superman}\r\n        >\r\n        </Grid>\r\n    }\r\n}\r\n\r\nfunction getTileSize(width, height) {\r\n\r\n    const tileWidth = (MIN_BOARD_WIDTH / width) < MIN_TILE_SIZE ?\r\n        MIN_TILE_SIZE : Math.floor(MIN_BOARD_WIDTH / width)\r\n    const tileHeight = (MIN_BOARD_HEIGHT / height) < MIN_TILE_SIZE ?\r\n        MIN_TILE_SIZE : Math.floor(MIN_BOARD_HEIGHT / height)\r\n\r\n    return Math.min(tileWidth, tileHeight)\r\n}\r\n\r\nexport default GameBoard","import * as React from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display:\"flex\",\r\n        alignItems:\"flex-end\"\r\n        ,flexDirection:\"column\"\r\n    },\r\n\r\n});\r\n\r\nexport const GameSettings =withStyles(styles)( (props) => {\r\n\r\n    function handleKeyPress(ev){\r\n        if(ev.key===\"Enter\"){\r\n            props.handleNewGame()\r\n        }\r\n    }\r\n\r\n    return <div   className={props.classes.root} onKeyPress={handleKeyPress}>\r\n        <TextField\r\n            id=\"gameWidth\"\r\n            label=\"Columns\"\r\n            placeholder=\"6\"\r\n            type=\"number\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameWidth}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Rows\"\r\n            placeholder=\"6\"\r\n            type=\"number\" id=\"gameHeight\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameHeight}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Mines\"\r\n            placeholder=\"6\"\r\n            multiline\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            id=\"mines\"\r\n            onChange={props.handleInput}\r\n            value={props.mines}\r\n        />\r\n    </div>\r\n})","import * as React from \"react\"\r\nimport {RedFlag} from \"../assets/RedFlag\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontSize:\"16px\",\r\n        width:\"fit-content\",\r\n        whiteSpace: \"nowrap\",\r\n        height: \"50px\",\r\n        padding:\"4px\",\r\n\r\n    }\r\n});\r\nexport const FlagsLeft = withStyles(styles)(function (props) {\r\n    return <div className={props.classes.root}>\r\n        <RedFlag width={\"20px\"}/>\r\n            {` X${props.flags}`}\r\n\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    dialogPaper: {\r\n        minHeight: '20vh',\r\n        maxHeight: '40vh',\r\n        minWidth: \"30vw\",\r\n        maxWidth: \"50vw\",\r\n        backgroundColor:\"white\",\r\n        opacity:\"0.6\",\r\n        border:\"double\",\r\n        borderWidth:\"4px\",\r\n        textAlign:\"center\"\r\n    },\r\n};\r\n\r\n@withStyles(styles)\r\nclass AlertDialog extends React.Component {\r\n\r\n    render() {\r\n        const {text,title}=this.props\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={this.props.open}\r\n                    onClose={this.props.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                    classes={{paper: this.props.classes.dialogPaper}}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className={this.props.dialog} id=\"alert-dialog-description\">\r\n                          {text}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.handleOk} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlertDialog;","import * as React from \"react\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\n\r\nconst styles = theme => ({\r\n        root: {\r\n            display: \"flex\", alignItems: \"center\", paddingLeft: \"10px\"\r\n        },\r\n            label: {\r\n        position:\"relative\",\r\n        right:\"20px\",\r\n        '&:hover':{\r\n            cursor:\"pointer\"\r\n        }\r\n    },\r\n\r\n    }\r\n)\r\n;\r\n\r\nexport const Superman = withStyles(styles)((props) => {\r\n    return <div className={props.classes.root}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox onChange={props.toggle} icon={<FavoriteBorder/>} checkedIcon={<Favorite/>}\r\n                          checked={props.value}/>\r\n            }\r\n        />\r\n        <div onClick={props.toggle} className={props.classes.label}>Superman</div>\r\n    </div>\r\n})","import * as React from \"react\"\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        color: \"white\",\r\n        alignitems: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        background: \"#4a752c\"\r\n    }\r\n});\r\n\r\nexport const TopBar=withStyles(styles)((props)=>{\r\n    return <div className={props.classes.root} style={props.style}>\r\n        {props.children}\r\n    </div>\r\n})","import * as React from \"react\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport {GameSettings} from \"./components/GameSettings\";\r\nimport {FlagsLeft} from \"./components/FlagsLeft\";\r\nimport AlertDialog from \"./components/AlertDialog\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport {Superman} from \"./components/SupermanCheckbox\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {TopBar} from \"./components/TopBar\";\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"grid\",\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n        gridTemplateColumns: \"minmax(80px,min-content) min-content\",\r\n    },\r\n    gameSettings: {\r\n        gridColumn: \"1\",\r\n        gridRow: \"2/3\",\r\n        background: \"#b648f2\",\r\n        padding: \"12px\"\r\n    }\r\n});\r\n\r\n@inject('GameStore')\r\n@withStyles(styles)\r\n@observer\r\nclass MineSweeperGame extends React.Component {\r\n    state = {\r\n        gameHeight: 6,\r\n        gameWidth: 6,\r\n        mines: 2,\r\n    }\r\n\r\n    startGame = () => { // needs to be from container\r\n        const {GameStore} = this.props;\r\n        GameStore.newGame(this.state.gameWidth, this.state.gameHeight, this.state.mines)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        this.startGame()\r\n    }\r\n\r\n\r\n    handleTileClick = (ev) => {\r\n        const tile = ev.target.closest('.tile')\r\n        if (!tile || this.props.GameStore.loading) {\r\n            return\r\n        }\r\n        const [rowIndex, columnIndex] = tile.id.split(\"-\");\r\n        if (!rowIndex || !columnIndex) {\r\n            throw \"failed to parse tile id\"\r\n        }\r\n        try {\r\n            this.props.GameStore.handleClickTileAndCheckWin(parseInt(rowIndex), parseInt(columnIndex), ev.shiftKey)\r\n        } catch (e) {\r\n            throw \"probably failed to parse tile id\" + e\r\n        }\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const val = parseInt(ev.target.value)\r\n        this.setState({[ev.target.id]: val ? val : ''});\r\n    }\r\n\r\n    render() {\r\n        const {GameStore,classes} = this.props;\r\n        const NotValidDialog =\r\n            <AlertDialog\r\n                open={GameStore.wrongParams}\r\n                handleOk={GameStore.closeParamsDialog}\r\n                title={\"Oopsie!\"}\r\n                text=\"Valid Field size:  1-300 :Valid Mines Number: 1- Game Board Size   \"\r\n                handleClose={GameStore.closeParamsDialog}/>\r\n        const WonDialog =\r\n            <AlertDialog open={GameStore.won}\r\n                         handleOk={this.startGame}\r\n                         text=\"Can you do it again?\"\r\n                         title={\"Woohoo!\"}/>\r\n        const LostDialog =\r\n            <AlertDialog\r\n                open={GameStore.lost}\r\n                handleOk={this.startGame}\r\n                text=\"Let's try again!\"\r\n                title={\"Boom :(\"}/>\r\n        const NoFlagsDialog =\r\n            <AlertDialog title=\"Out of flags\"\r\n                         handleOk={GameStore.hideWarning}\r\n                         open={GameStore.displayWaring}\r\n                         handleClose={GameStore.hideWarning}/>\r\n\r\n        return <div className={classes.root} onClick={this.handleTileClick}>\r\n            <div className={classes.gameSettings}>\r\n                <GameSettings handleNewGame={this.handleNewGame}\r\n                              handleInput={this.handleInput} gameHeight={this.state.gameHeight}\r\n                              gameWidth={this.state.gameWidth}\r\n                              mines={this.state.mines}/>\r\n            </div>\r\n            <TopBar style={{gridRow: \"1\", gridColumn: \"2/4\"}}>\r\n                <Superman toggle={GameStore.toggleSuperman} value={GameStore.superman}/>\r\n                <FlagsLeft flags={GameStore.minesNumber - GameStore.flags}/>\r\n            </TopBar>\r\n            <div style={{gridRow: \"1\", gridColumn: \"1\", background: \"#ffcd1a\"}}>\r\n                <Button style={{height: \"100%\", width: \"100%\", color: \"white\"}} color=\"inherit\"\r\n                        onClick={this.handleNewGame}>\r\n                    Go!\r\n                </Button>\r\n            </div>\r\n            <div style={{gridRow: \"2/3 \", gridColumn: \"2\"}}>\r\n                {GameStore.loading && <LinearProgress/>}\r\n\r\n                <GameBoard/>\r\n            </div>\r\n            {WonDialog}\r\n            {LostDialog}\r\n            {NoFlagsDialog}\r\n            {NotValidDialog}\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default MineSweeperGame","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Provider} from \"mobx-react\";\nimport {MineSweeperStore} from \"./mineSweeperGame/MineSweeperStore\";\nimport MineSweeperGame from \"./mineSweeperGame/MineSweeperGame\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst gameStore = new MineSweeperStore();\nconst MineSweeper = (<Provider GameStore={gameStore}><MineSweeperGame/></Provider>);\n\nconst styles = theme => ({\n\n    root:{\n        backgroundColor:\"#2E3439\",\n        minHeight:\"100vh\",\n        display:\"flex\",\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    }\n})\n@withStyles(styles)\nclass App extends Component {\n    render() {\n        return (\n            <div className={this.props.classes.root}>\n                {MineSweeper}\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}