{"version":3,"sources":["logo.svg","consts.js","mineSweeperGame/storageController.js","mineSweeperGame/utils/utils.js","mineSweeperGame/MineSweeperStore.js","mineSweeperGame/assets/RedFlag.js","mineSweeperGame/assets/Bomb.js","mineSweeperGame/GameTile.jsx","mineSweeperGame/GameBoard.js","mineSweeperGame/GameSettings.js","mineSweeperGame/FlagsLeft.js","mineSweeperGame/assets/AlertDialog.js","mineSweeperGame/SupermanCheckbox.js","mineSweeperGame/MineSweeperGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TILE_TYPE","CLICKED","UNCLICKED","FLAG","REVEALED_MINE","MAX_OBJ_SIZE_IN_DB","MAX_WIDTH","MAX_HEIGHT","getNumberOfEntries","CC","localforage","getAllCCforCCkey","key","clearStorage","_clearStorage","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","sessionStorage","clear","stop","getSetOfRandomsInRange","min","max","n","resultSet","Set","counter","size","add","getRandomInt","Math","ceil","floor","random","getKey","i","j","concat","flushCCCells","CCCells","CCgroup","Object","keys","length","saveCCGroup","getBoundreis","row","column","height","width","top","bottom","right","left","MineSweeperStore","_class","_this","classCallCheck","initializerDefineProperty","_descriptor","minesLocation","clickedCells","flaggedCells","correctFlags","_descriptor2","_descriptor3","_descriptor4","_descriptor5","boardSize","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","emptyCellsMapped","minesNumber","_descriptor11","index2CC","_descriptor12","_descriptor13","_descriptor14","solveGame","asyncToGenerator","mark","_callee2","CCKey","solveGameScheduler","_context2","_ref2","markConnectedComponnetsSolve","abrupt","Promise","resolve","reject","setTimeout","then","r","_descriptor15","shouldVisitCell","calculateAdjMines","_descriptor16","_descriptor17","_descriptor18","chooseBetweenMinesAndEmptyCells","_descriptor19","_descriptor20","boundary","mineCount","isAMine","visitedCells","undefined","parts","numOfCCItems","push","indexKey","toString","loops","cellIndex","shift","storageKey","setNumberOfEntries","cell","x","_descriptor21","getCCid","isCCForCellinStorage","_ref3","_callee3","_context3","t0","sent","_x","_descriptor22","_descriptor23","cleanUpAfterFlagRemoved","openedCells","_descriptor24","isFlagCorrect","_descriptor25","_descriptor26","_descriptor27","_descriptor28","handleClickTileInner","shiftPressed","superman","increaseClicks","toggleFlag","handleClickMine","handleClickEmptyTile","_descriptor29","emptyCellsLocation","has","_descriptor30","_descriptor31","placeMines","placeEmptyCells","createClass","value","flags","get","won","lost","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","_this2","displayWaring","_this3","per","percantage","_this4","_this5","clickCell","_this6","_callee4","_context4","numberOfClicks","wrongParams","_this7","_ref5","_callee5","_context5","clearAll","_x2","_x3","_x4","_this8","_this9","isValidGameParams","setLoading","setBoardParams","initGameState","res","_this10","_ref6","_callee6","_key2","cc","_context6","assign","_x5","_x6","_this11","_ref7","_callee7","_context7","clickAllCCfromStorage","clickConnectedCells","_x7","_x8","_this12","_this13","_this14","console","log","_this15","removeFlag","remainingFlags","addFlag","_this16","_this17","_this18","loading","_this19","mines","_this20","RedFlag","props","react","id","y","viewBox","style","enableBackground","fill","d","cx","cy","Bomb","stroke","strokeWidth","strokeMiterlimit","points","styles","theme","tile","textAlign","display","justifyContent","alignItems","boxSizing","unrevealedTile","&:hover","backgroundColor","unrevealed0","unrevealed1","emptyTile","empty0","empty1","revealed","adj1","color","adj2","adj3","adj4","adj5","FlaggedTile","UnrevealedTile","colorType","RedFlag_RedFlag","MineTile","Bomb_Bomb","withStyles","classes","colorClass","className","join","children","EmptyTile","ClickedTile","adjMines","GameTile","_React$PureComponent","possibleConstructorReturn","getPrototypeOf","inherits","cellState","GameTile_FlaggedTile","GameTile_MineTile","adj","React","GameBoard","inject","observer","computeCell","store","GameStore","clicked","revealBoard","cellRenderer","_ref","columnIndex","rowIndex","cellType","GameTile_GameTile","tableH","tableW","TILE_SIZE_WIDTH","TILE_SIZE_HEIGHT","numClicks","TILE_SIZE","es","columnCount","outline","padding","rowCount","columnWidth","rowHeight","clicks","GameSettings","flexDirection","onKeyPress","ev","handleNewGame","TextField_default","label","placeholder","type","multiline","margin","gameWidth","onChange","handleInput","gameHeight","FlagsLeft","root","fontFamily","fontSize","whiteSpace","AlertDialog","dialogPaper","minHeight","maxHeight","minWidth","maxWidth","opacity","border","borderWidth","_this$props","text","title","react_default","createElement","Dialog_default","open","onClose","handleClose","aria-labelledby","aria-describedby","paper","DialogTitle_default","DialogContent_default","DialogContentText_default","dialog","DialogActions_default","Button_default","onClick","handleOk","Component","Superman","paddingLeft","FormControlLabel_default","control","Checkbox_default","toggle","icon","FavoriteBorder_default","checkedIcon","Favorite_default","position","MineSweeperGame","gridTemplateColumns","state","startGame","newGame","handleTileClick","target","closest","_tile$id$split","split","_tile$id$split2","slicedToArray","handleClickTile","parseInt","shiftKey","val","setState","defineProperty","notValidDialog","assets_AlertDialog","closeParamsDialog","wonDialog","lostDialog","noFlagsDialog","hideWarning","gridColumn","gridRow","background","GameSettings_GameSettings","alignitems","SupermanCheckbox_Superman","toggleSuperman","LinearProgress_default","mineSweeperGame_GameBoard","gameStore","MineSweeper","index_module","mineSweeperGame_MineSweeperGame","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71d9def1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nexport const TILE_TYPE = {\r\n    CLICKED: \"click\",\r\n    UNCLICKED: \"notClicked\",\r\n    FLAG: \"flag\",\r\n    REVEALED_MINE: \"mine\",\r\n}\r\n\r\nexport const  MIN_BOARD_WIDTH=400\r\nexport const  MIN_BOARD_HEIGHT=400\r\nexport const MIN_TILE_SIZE=30\r\n\r\nexport const MAX_OBJ_SIZE_IN_DB = 5000;\r\n\r\nexport const MAX_WIDTH=300;\r\nexport const MAX_HEIGHT=300;\r\n","import * as localforage from \"localforage\";\r\n\r\nexport function setCCGroupForCell(key,CC) {\r\n    sessionStorage.setItem(key, CC)\r\n}\r\n\r\nexport function getCCGroupForCell(key) {\r\n    return sessionStorage.getItem(key)\r\n}\r\n\r\nexport function getNumberOfEntries(CC) {\r\n    return localforage.getItem(CC)\r\n}\r\nexport function setNumberOfEntries(CC,parts) {\r\n\r\n    localforage.setItem(CC, parts);\r\n}\r\n\r\nexport function getAllCCforCCkey(key) {\r\n  return  localforage.getItem(key);\r\n}\r\nexport function saveCCGroup(key,CCgroup) {\r\n    //console.log(\"localfr\")\r\n    if(Object.keys(CCgroup).length<2){\r\n        debugger\r\n    }\r\n    localforage.setItem(key, CCgroup);\r\n}\r\n\r\n\r\nexport async function clearStorage() {\r\n  await localforage.clear();\r\n    sessionStorage.clear();\r\n}","import {MAX_HEIGHT, MAX_WIDTH} from \"../../consts\";\r\nimport {saveCCGroup} from \"../storageController\";\r\n\r\nexport function getSetOfRandomsInRange(min, max, n) {\r\n    if (max - min < n) {\r\n        return;  // todo  throw exception?\r\n    }\r\n    const resultSet = new Set();\r\n    let counter = 0;\r\n    while (resultSet.size < n) {\r\n        resultSet.add(getRandomInt(min, max + 1));\r\n        counter++;\r\n        if (counter > n * 100000) {\r\n            throw \"Something went very wrong\"  // counter is just for safety, getRandomInt should work\r\n        }\r\n    }\r\n    return resultSet\r\n}\r\n\r\nfunction getRandomInt(min, max) { //stolen from developer.mozilla\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nexport function getKey(i, j) {\r\n    const key = `${i}-${j}`;\r\n    return key\r\n}\r\n\r\nexport function isValidGameParams(width, height, minesNumber) {\r\n    return width < MAX_WIDTH + 1 && height < MAX_HEIGHT + 1\r\n        && minesNumber < width * height && width > 0 && height > 0 && minesNumber > 0\r\n}\r\n\r\n\r\nexport function flushCCCells(key, CCCells) {\r\n    saveCCGroup(key, CCCells);\r\n}\r\n\r\nexport function getBoundreis(row, column, height, width) {\r\n    return {\r\n        top: Math.max(0, row - 1),\r\n        bottom: Math.min(row + 1, height - 1),\r\n        right: Math.min(column + 1, width - 1),\r\n        left: Math.max(0, column - 1),\r\n    }\r\n}\r\n\r\n\r\nexport function generateEmptyBoard(width, height, initValue) {\r\n    const row = new Array(width).fill(initValue);\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        board.push([...row]);\r\n    }\r\n    return board;\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {\r\n    flushCCCells,\r\n    generateEmptyBoard,\r\n    getBoundreis,\r\n    getKey,\r\n    getSetOfRandomsInRange,\r\n    isValidGameParams\r\n} from \"./utils/utils\";\r\nimport {\r\n    clearStorage,\r\n    getAllCCforCCkey,\r\n    getCCGroupForCell,\r\n    getNumberOfEntries,\r\n    saveCCGroup,\r\n    setNumberOfEntries\r\n} from \"./storageController\";\r\nimport {MAX_HEIGHT, MAX_OBJ_SIZE_IN_DB, MAX_WIDTH} from \"../consts\";\r\n\r\nexport class MineSweeperStore {\r\n\r\n    @observable superman = false;\r\n    minesLocation = new Set();\r\n    clickedCells = {}\r\n    flaggedCells = {}\r\n    correctFlags = 0;\r\n    @observable flags = 0;\r\n    @observable openedCells = 0;\r\n    @observable numberOfClicks = 0;\r\n    @observable gameNumber = 0;\r\n    boardSize = -1;\r\n    @observable width = -1;\r\n    @observable height = -1;\r\n    @observable loading = false;\r\n    @observable displayWaring = false;\r\n    @observable lost = false;\r\n    emptyCellsMapped = false\r\n    minesNumber = 0\r\n    @observable won=false\r\n    index2CC = {}\r\n    @observable wrongParams = false\r\n\r\n    @computed get revealBoard() {\r\n        return this.superman || this.won || this.lost\r\n    }\r\n\r\n    @action hideWarning = () => {\r\n        this.displayWaring = false\r\n    }\r\n\r\n    @action setPercentage = (per) => {\r\n        if (this.percantage < per) {\r\n            this.percantage = per\r\n        }\r\n    }\r\n\r\n    solveGame = async () => {\r\n        let CCKey = 0;\r\n        const solveGameScheduler = async () => {\r\n            for (let i = 0; i < this.height; i++) {\r\n                //  this.setPercentage(Math.floor((CCKey * 100) / this.boardSize))\r\n                for (let j = 0; j < this.width; j++) {\r\n                    CCKey++;\r\n                    if (!this.index2CC[(getKey(i, j))]) {\r\n                        await this.markConnectedComponnetsSolve(i, j, CCKey)\r\n                    }\r\n                }\r\n            }\r\n            return Promise.resolve(\"Game solved\")\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    solveGameScheduler().then(r => resolve(\"resolved\"))\r\n                }, 0);\r\n            }\r\n        )\r\n\r\n    };\r\n\r\n\r\n    @action clickCell = (key) => {\r\n        this.clickedCells[key] = true\r\n        this.increaseClicks();\r\n    }\r\n\r\n    shouldVisitCell = (key, i, j) => {\r\n        return !this.clickedCells[key] && this.calculateAdjMines(i, j) === 0\r\n    }\r\n\r\n    @action clickConnectedCells = (row, column) => {\r\n        const visitedCells = [];\r\n        visitedCells.push({row, column});\r\n        this.clickCell(getKey(row, column));\r\n        while (visitedCells.length > 0) {\r\n            const cellIndex = visitedCells.shift()\r\n            const {row, column} = cellIndex\r\n            const boundary = getBoundreis(row, column, this.height, this.width);\r\n\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j)\r\n                    if (this.shouldVisitCell(key, i, j)) {\r\n                        visitedCells.push({row: i, column: j})\r\n                    }\r\n                    this.clickCell(key)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearAll = async () => {\r\n        this.clickedCells = {};\r\n        this.minesLocation = {};\r\n        this.emptyCellsLocation = {};\r\n        this.flaggedCells = {};\r\n        this.index2CC = {};\r\n        this.flags = 0;\r\n        this.won=false\r\n        this.correctFlags = 0;\r\n        this.openedCells = 0;\r\n        this.numberOfClicks = 0;\r\n        this.minesNumber = 0;\r\n        this.lost = false;\r\n        this.wrongParams=false\r\n        //  this.won=false\r\n        await clearStorage();\r\n    };\r\n\r\n    @action initGameState = async (width, height, minesNumber) => {\r\n        await this.clearAll();\r\n        this.minesNumber = minesNumber;\r\n        if (this.emptyCellsMapped) {\r\n            this.placeEmptyCells(width, height, minesNumber)\r\n        } else {\r\n            this.placeMines(width, height, minesNumber);\r\n        }\r\n        return this.solveGame()\r\n        //              var t1 = performance.now();\r\n//                console.log(\"to start took \" + (t1 - t0) + \" milliseconds.\")\r\n    };\r\n\r\n    chooseBetweenMinesAndEmptyCells = (minesNumber) => {\r\n        if (minesNumber > (MAX_HEIGHT * MAX_WIDTH) / 2) {\r\n            this.emptyCellsMapped = true\r\n        }\r\n    }\r\n    @action closeParamsDialog = () => {\r\n        this.wrongParams = false\r\n    };\r\n\r\n    @action newGame = (width, height, minesNumber) => {\r\n        if (!isValidGameParams(width, height, minesNumber)) {\r\n            this.wrongParams = true\r\n            return //todoshould display warning\r\n        }\r\n        this.chooseBetweenMinesAndEmptyCells(minesNumber)\r\n        this.setLoading(true)\r\n        this.setBoardParams(width, height);\r\n        this.initGameState(width, height, minesNumber).then(res => {\r\n                this.setLoading(false)\r\n            }\r\n        )\r\n    };\r\n\r\n    calculateAdjMines = (row, column) => {\r\n        const boundary = getBoundreis(row, column, this.height, this.width);\r\n        let mineCount = 0;\r\n        for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n            for (let j = boundary.left; j <= boundary.right; j++) {\r\n                if (this.isAMine(i, j)) {\r\n                    mineCount++;\r\n                }\r\n            }\r\n        }\r\n        return mineCount;\r\n    };\r\n\r\n    markConnectedComponnetsSolve = (row, column, CC, visitedCells = [], CCCells = {}, parts = 1, numOfCCItems = 0) => {\r\n        visitedCells.push({row, column})\r\n        const indexKey = getKey(row, column);\r\n        this.index2CC[indexKey] = CC.toString()\r\n        CCCells[indexKey] = true;\r\n        numOfCCItems++;\r\n        let loops = 0;\r\n        while (loops < 400 && visitedCells.length > 0) {\r\n            loops++;\r\n            const cellIndex = visitedCells.shift();\r\n            const {row, column} = cellIndex;\r\n            if (numOfCCItems > MAX_OBJ_SIZE_IN_DB) {\r\n                const key = `${CC}-${parts}`;\r\n                flushCCCells(key, CCCells)\r\n                CCCells = {};\r\n                parts++;\r\n                numOfCCItems = 0;\r\n            }\r\n            const boundary = getBoundreis(row, column, this.height, this.width)\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j);\r\n                    const isSaved = this.index2CC[key]\r\n                    if (!isSaved) {\r\n                        this.index2CC[key] = CC.toString()\r\n                        if (this.calculateAdjMines(i, j) === 0) {\r\n                            visitedCells.push({row: i, column: j})\r\n                        }\r\n                        CCCells[key] = true;\r\n                        numOfCCItems++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (visitedCells.length < 1) {\r\n            const storageKey = `${CC}-${parts}`;\r\n            if ((Object.keys(CCCells).length + ((parts - 1) * MAX_OBJ_SIZE_IN_DB)) >= MAX_OBJ_SIZE_IN_DB) {\r\n                flushCCCells(storageKey, CCCells);\r\n                setNumberOfEntries(CC.toString(), parts)\r\n            }\r\n            return new Promise((resolve, reject) => resolve(\"good promise\"))\r\n        }\r\n\r\n        const cell = visitedCells.shift()\r\n        return new Promise(resolve => setTimeout(() => {\r\n            this.markConnectedComponnetsSolve(cell.row,\r\n                cell.column, CC, visitedCells, CCCells, parts, numOfCCItems).then(x => resolve(x))\r\n        }, 0))\r\n\r\n    };\r\n\r\n    // markConnectedComponnetsSolve = (row, column, CC, cellsQueue = [], discoverdCells = {}, parts = 1, numOfCCItems = 0) => {\r\n    //     //const cellsQueue = [];\r\n    //     cellsQueue.push({row, column})\r\n    //     const indexKey = getKey(row, column);\r\n    //     // let discoverdCells = {}\r\n    //     //let parts = 1;\r\n    //     //let numOfCCItems = 0;\r\n    //     //setCCGroupForCell(indexKey, CC.toString());// save CC for each item\r\n    //     discoverdCells[indexKey] = true;\r\n    //     numOfCCItems++;\r\n    //     let loops = 0;\r\n    //     //  const loop = () => {\r\n    //     while (loops < 100 && cellsQueue.length > 0) {\r\n    //       //  console.log(\"s\")\r\n    //         loops++;\r\n    //         const cellIndex = cellsQueue.shift()\r\n    //         const {row, column} = cellIndex\r\n    //         if (numOfCCItems % MAX_OBJ_SIZE_IN_DB === 0) {\r\n    //             const key = `${CC}-${parts}`\r\n    //             saveCCGroup(key, discoverdCells);\r\n    //             for (let cell in discoverdCells) {\r\n    //                 //console.log(cell)\r\n    //                 setCCGroupForCell(cell, CC.toString())\r\n    //             }\r\n    //             discoverdCells = {};\r\n    //             parts++;\r\n    //         }\r\n    //         const boundary = getBoundreis(row, column, this.height, this.width)\r\n    //         for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n    //             for (let j = boundary.left; j <= boundary.right; j++) {\r\n    //                 const key = getKey(i, j);\r\n    //                 const isDiscovered = parts > 1 ? getCCGroupForCell(key) : discoverdCells[key] // flushed to db ro not\r\n    //                 //  const isSaved = getCCGroupForCell(key);\r\n    //                 if (!isDiscovered) {\r\n    //                    // setCCGroupForCell(key, CC.toString());\r\n    //                     if (this.calculateAdjMines(i, j) === 0) {\r\n    //                         cellsQueue.push({row: i, column: j})\r\n    //                     }\r\n    //                     discoverdCells[key] = true;\r\n    //                     numOfCCItems++;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     let promise = new Promise(resolve => resolve(\"bad promise\"))\r\n    //     if (cellsQueue.length < 1) {\r\n    //         const storageKey = `${CC}-${parts}`;\r\n    //         if (Object.keys(discoverdCells).length > 300 || parts > 1) {\r\n    //             for (let cell in discoverdCells) {\r\n    //                 //console.log(cell)\r\n    //                 setCCGroupForCell(cell, CC.toString())\r\n    //             }\r\n    //             saveCCGroup(storageKey, discoverdCells);\r\n    //             setNumberOfEntries(CC.toString(), parts)\r\n    //         }\r\n    //         promise = new Promise((resolve, reject) => resolve(\"good promise\"))\r\n    //     } else {\r\n    //         const {row, column} = cellsQueue.shift()\r\n    //         promise = new Promise(resolve => setTimeout(() => {\r\n    //             this.markConnectedComponnetsSolve(row,\r\n    //                 column, CC, cellsQueue, discoverdCells, parts, numOfCCItems).then(x => resolve(x))\r\n    //         }, 0))\r\n    //     }\r\n    //     return promise\r\n    // };\r\n\r\n    @action clickAllCCfromStorage = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        const CC = this.index2CC[key]\r\n        const parts = await getNumberOfEntries(CC)\r\n\r\n        for (let i = 1; i <= parts; i++) {\r\n            const key = `${CC}-${i}`\r\n            const cc = await getAllCCforCCkey(key)\r\n            Object.assign(this.clickedCells, cc)\r\n        }\r\n        this.numberOfClicks++;\r\n    };\r\n\r\n\r\n    getCCid = (key) => {\r\n        return this.index2CC[key]\r\n    }\r\n\r\n    isCCForCellinStorage = async (key) => {\r\n        const CC = this.getCCid(key)\r\n        return CC && await getNumberOfEntries(CC)\r\n    }\r\n\r\n    @action\r\n    handleClickEmptyTile = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        if (this.calculateAdjMines(row, column) === 0) {\r\n            const isInStorage = await this.isCCForCellinStorage(key)\r\n            if (isInStorage) {\r\n                this.clickAllCCfromStorage(row, column)\r\n            } else {\r\n                this.clickConnectedCells(row, column)\r\n            }\r\n        }\r\n        this.clickedCells[key] = true;\r\n        this.openedCells = Object.keys(this.clickedCells).length\r\n\r\n    };\r\n\r\n    @action\r\n    handleClickMine = (i, j) => {\r\n        this.lost = true;\r\n    };\r\n\r\n    cleanUpAfterFlagRemoved = (key) => {\r\n        if (this.clickedCells[key]) {\r\n            delete this.clickedCells[key]\r\n            this.openedCells--;\r\n        }\r\n    }\r\n\r\n    @action removeFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            this.correctFlags--\r\n        }\r\n        delete this.flaggedCells[key];\r\n        this.flags--;\r\n        this.cleanUpAfterFlagRemoved(key)\r\n    }\r\n\r\n    isFlagCorrect = (i, j) => {\r\n        return this.isAMine(i, j)\r\n    }\r\n\r\n    @action addFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            console.log(\"correct flag\")\r\n            this.correctFlags++;\r\n        }\r\n        this.flags++\r\n        this.flaggedCells[key] = true\r\n    }\r\n\r\n    @action\r\n    toggleFlag = (i, j) => {\r\n        const key = getKey(i, j);\r\n        const flagged = this.flaggedCells[key];\r\n        if (flagged) {\r\n            this.removeFlag(i, j)\r\n            return;\r\n        }\r\n        if (this.remainingFlags() > 0) {\r\n            this.addFlag(i, j)\r\n        } else {\r\n            this.displayWaring = true\r\n        }\r\n    };\r\n\r\n    @action\r\n    increaseClicks = () => {\r\n        this.numberOfClicks++\r\n    };\r\n\r\n    @action handleClickTile=(i, j, shiftPressed)=>{\r\n        this.handleClickTileInner(i,j,shiftPressed)\r\n        if((this.correctFlags+this.openedCells)===this.boardSize){\r\n            this.won=true\r\n        }\r\n    }\r\n\r\n    handleClickTileInner = (i, j, shiftPressed) => {\r\n        if (this.superman) {\r\n            return\r\n        }\r\n        const key = getKey(i, j);\r\n        if (this.clickedCells[key] && !this.flaggedCells[key]) {\r\n            return;\r\n        }\r\n        this.increaseClicks();\r\n        if (shiftPressed) {\r\n            this.toggleFlag(i, j);\r\n            return\r\n        }\r\n        if (this.flaggedCells[key]) {\r\n            return\r\n        }\r\n        if (this.isAMine(i, j)) {\r\n            this.handleClickMine(i, j);\r\n            return;\r\n        }\r\n        this.handleClickEmptyTile(i, j);\r\n    };\r\n\r\n\r\n    @action setLoading = (loading) => {\r\n        this.loading = loading\r\n    };\r\n\r\n    isAMine = (i, j) => {\r\n        return this.emptyCellsMapped ?\r\n            !this.emptyCellsLocation.has(i * this.width + j) : this.minesLocation.has(i * this.width + j)\r\n    };\r\n\r\n    // @computed get won() {\r\n    //     console.log(\"won in computed\")\r\n    //     return this.correctFlags + this.openedCells === this.boardSize\r\n    // };\r\n\r\n    remainingFlags() {\r\n        return this.minesNumber - this.flags\r\n    }\r\n\r\n    @action\r\n    setBoardParams = (width, height, minesNumber) => {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.boardSize = width * height;\r\n        this.mines = minesNumber;\r\n    }\r\n\r\n    @action\r\n    toggleSuperman = () => {\r\n        this.superman = !this.superman\r\n    };\r\n\r\n    placeMines = (width, height, minesNumber) => {\r\n        this.minesLocation = getSetOfRandomsInRange(0, width * height - 1, minesNumber)\r\n    }\r\n\r\n    placeEmptyCells = (width, height, minesNumber) => {\r\n        const size = width * height\r\n        this.emptyCellsLocation = getSetOfRandomsInRange(0, width * height - 1, size - minesNumber)\r\n\r\n    };\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const RedFlag = function (props) {\r\n    return <svg id=\"Layer_1\"\r\n                x=\"0px\" y=\"0px\" viewBox=\"0 0 511.999 511.999\" style={\r\n                    {enableBackground:\"new 0 0 511.999 511.999\",width:props.width,height:props.height}}>\r\n<path style={{fill:\"#E21B1B\"}}\r\n      d=\"M103.919,51.744c0,0,41.296,33.496,109.008,18.4c64.2-14.264,124.056-30.464,224.616,5.856v215.032  c0,0-92.488-44.104-176.736-24.432s-131.88,12.12-156.888-12.888\"/>\r\n        <rect x=\"90.74\" y=\"37.524\" style={{fill:\"#999999\"}} width=\"16\" height=\"474.475\"/>\r\n        <circle style={{fill:\"#666666\"}} cx=\"98.741\" cy=\"24.284\" r=\"24.284\"/>\r\n</svg>\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const Bomb=function (props) {\r\n  //  const {width=\"90%\",height=\"90%\"}={props}\r\n    return <svg  id=\"Layer_1\" x=\"0px\" y=\"0px\" width={props.width} height={props.height} viewBox=\"0 0 512 512\" enableBackground=\"new 0 0 512 512\" >\r\n<g>\r\n\t<path d=\"M218.255,131.197c16.958,0,33.379,2.285,48.987,6.542V91.448h-92.995v45.008   C188.357,133.027,203.091,131.197,218.255,131.197z\"/>\r\n    <circle fill=\"#020202\" cx=\"218.255\" cy=\"316.947\" r=\"171.502\"/>\r\n    <path fill=\"none\" stroke=\"#000000\" strokeWidth=\"10\" strokeMiterlimit=\"10\" d=\"M218.255,108.849c0,0-6.776-113.407,92.398-60   c79.104,42.599,117,17,117,17\"/>\r\n    <polygon points=\"422.598,23.551 430.759,46.499 452.756,36.042 442.3,58.04 465.247,66.2 442.3,74.36 452.756,96.358    430.759,85.901 422.598,108.849 414.438,85.901 392.441,96.358 402.897,74.36 379.948,66.2 402.897,58.04 392.441,36.042    414.438,46.499  \"/>\r\n</g>\r\n</svg>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"./assets/RedFlag\";\r\nimport {Bomb} from \"./assets/Bomb\";\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {TILE_TYPE} from \"../consts\";\r\n\r\nconst styles = theme => ({\r\n\r\n    tile: {\r\n        textAlign:\"center\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        boxSizing:\"border-box\",\r\n\r\n    },\r\n    unrevealedTile:{\r\n\r\n        '&:hover': {\r\n            backgroundColor: \"#b3e652\",\r\n        },\r\n    },\r\n    unrevealed0:{\r\n        backgroundColor: \"#a2d149\",\r\n\r\n    },\r\n    unrevealed1:{\r\n        backgroundColor: \"#aad751\",\r\n    },\r\n    emptyTile:{\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n\r\n    },\r\n    empty0:{\r\n        backgroundColor:\"#d7b899\",\r\n    },\r\n    empty1:{\r\n        backgroundColor:\"#e5c29f\",\r\n    },\r\n    revealed: {\r\n        backgroundColor: \"#FFFAFA\"\r\n\r\n    },\r\n    adj1: {\r\n        color: \"#005EFF\"\r\n    },\r\n    adj2: {\r\n        color: \"#56CD56\"\r\n    },\r\n    adj3: {\r\n        color: \"#FFAB00\"\r\n    },\r\n    adj4: {\r\n        color: \"#FF3300\"\r\n    },\r\n    adj5: {\r\n        color: \"#FF0044\"\r\n    },\r\n\r\n});\r\n\r\n\r\nconst FlaggedTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><RedFlag width={\"70%\"}/></UnrevealedTile>\r\n}\r\n\r\nconst MineTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><Bomb width={\"70%\"}/></UnrevealedTile>\r\n}\r\n\r\nconst UnrevealedTile = withStyles(styles)(function (props) {\r\n    const colorType=props.colorType\r\n    const classes=props.classes\r\n    const colorClass=props.classes[`unrevealed${colorType}`]\r\n    return <div className={[classes.tile,classes.unrevealedTile, colorClass].join(' ')}>{props.children}</div>\r\n})\r\n\r\nconst EmptyTile = withStyles(styles)(function (props) {\r\n    const colorClass=props.classes[`empty${ props.colorType}`]\r\n    return <div className={[props.classes.emptyTile,colorClass].join(' ')} >{props.children}</div>\r\n})\r\n\r\n\r\nconst ClickedTile = withStyles(styles)(function (props) {\r\n    const {adjMines} = props\r\n    const className = adjMines > 5 ? props.classes.adj5 : props.classes[`adj${adjMines}`]// (function () {\r\n    return <div className={[props.classes.tile, className].join(\" \")}>\r\n        <EmptyTile colorType={props.colorType}>{adjMines > 0 && adjMines}</EmptyTile></div>\r\n})\r\n\r\nexport class GameTile extends React.PureComponent {\r\n    render() {\r\n        console.log(\"tile\")\r\n        return (() => {\r\n            switch (this.props.cellState) {\r\n                case TILE_TYPE.FLAG:\r\n                    return <FlaggedTile colorType={this.props.colorType} />;\r\n                case TILE_TYPE.REVEALED_MINE:\r\n                    return <MineTile colorType={this.props.colorType} />\r\n                case TILE_TYPE.UNCLICKED:\r\n                    return <UnrevealedTile colorType={this.props.colorType}/>\r\n                case TILE_TYPE.CLICKED:\r\n                    return <ClickedTile colorType={this.props.colorType} adjMines={this.props.adj}/>;\r\n                default:\r\n                    return null;\r\n            }\r\n        })()\r\n    }\r\n\r\n};","import * as React from \"react\"\r\nimport {Grid} from \"react-virtualized\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {GameTile} from \"./GameTile\";\r\nimport {getKey} from \"./utils/utils\";\r\nimport {MIN_BOARD_HEIGHT, MIN_BOARD_WIDTH, MIN_TILE_SIZE, TILE_TYPE} from \"../consts\";\r\n\r\n@inject('GameStore')\r\n@observer\r\nclass GameBoard extends React.Component {\r\n\r\n    computeCell = (i, j) => {\r\n        const store = this.props.GameStore\r\n        if(store.loading){\r\n            return TILE_TYPE.UNCLICKED\r\n        }\r\n        const key = getKey(i, j)\r\n\r\n        const clicked = store.revealBoard || store.clickedCells[key]\r\n\r\n        if (store.isAMine(i, j) && clicked) {\r\n            return TILE_TYPE.REVEALED_MINE\r\n        }\r\n        if (store.flaggedCells[key] && !store.revealBoard) {\r\n            return TILE_TYPE.FLAG\r\n        }\r\n        return clicked ? TILE_TYPE.CLICKED : TILE_TYPE.UNCLICKED\r\n\r\n    }\r\n\r\n    cellRenderer = ({columnIndex, key, rowIndex, style}) => {\r\n        const {GameStore} = this.props\r\n        console.log(\"cellRen\")\r\n        const cellType = this.computeCell(rowIndex, columnIndex) //GameStore.board[rowIndex][columnIndex]\r\n        const adj = cellType === TILE_TYPE.CLICKED ? GameStore.calculateAdjMines(rowIndex, columnIndex) : -1;\r\n        const colorType = (rowIndex + columnIndex) % 2\r\n        return <div className=\"tile\" id={`${rowIndex}-${columnIndex}`} key={key} style={style}>\r\n            <GameTile colorType={colorType} adj={adj} cellState={cellType}/>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        const store = this.props.GameStore\r\n        const tableH = Math.min(store.height,20)\r\n        const tableW = Math.min(store.width,20)\r\n        const superman = store.superman\r\n        console.log(\"render\",)\r\n        const TILE_SIZE_WIDTH = (MIN_BOARD_WIDTH / tableW) < MIN_TILE_SIZE ? MIN_TILE_SIZE :Math.floor( MIN_BOARD_WIDTH / tableW)\r\n        const TILE_SIZE_HEIGHT = (MIN_BOARD_HEIGHT / tableW) < MIN_TILE_SIZE ? MIN_TILE_SIZE :Math.floor( MIN_BOARD_HEIGHT / tableW)\r\n        const numClicks = store.numberOfClicks // this is for rerender\r\n        console.log(TILE_SIZE_WIDTH,TILE_SIZE_HEIGHT)\r\n        const TILE_SIZE=Math.max(TILE_SIZE_HEIGHT,TILE_SIZE_WIDTH)\r\n        return <Grid cellRenderer={this.cellRenderer}\r\n                     columnCount={store.width}\r\n                     style={{outline: 'none',padding:\"0 18px 18px 0\"}}\r\n                     rowCount={store.height}\r\n                     columnWidth={TILE_SIZE}\r\n                     height={tableH * TILE_SIZE}\r\n                     width={tableW * TILE_SIZE}\r\n                     rowHeight={TILE_SIZE}\r\n                     clicks={numClicks}\r\n                     superman={superman}\r\n        >\r\n        </Grid>\r\n    }\r\n}\r\n\r\nexport default GameBoard","import * as React from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport const GameSettings = (props) => {\r\n\r\n    function handleKeyPress(ev){\r\n        console.log(\"key\",ev)\r\n        if(ev.key===\"Enter\"){\r\n            props.handleNewGame()\r\n        }\r\n\r\n    }\r\n    return <div id='b' style={{display:\"flex\",alignItems:\"flex-end\",flexDirection:\"column\"}} onKeyPress={handleKeyPress}>\r\n        <TextField\r\n            id=\"gameWidth\"\r\n            label=\"Columns\"\r\n            placeholder=\"6\"\r\n            type=\"number\"\r\n            multiline\r\n            margin=\"normal\"\r\n            // variant=\"outlined\"\r\n            value={props.gameWidth}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Rows\"\r\n            placeholder=\"6\"\r\n            type=\"number\" id=\"gameHeight\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameHeight}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Mines\"\r\n            placeholder=\"6\"\r\n            multiline\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            id=\"mines\"\r\n            onChange={props.handleInput}\r\n            value={props.mines}\r\n        />\r\n\r\n\r\n    </div>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"./assets/RedFlag\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontSize:\"16px\",\r\n        width:\"fit-content\",\r\n        whiteSpace: \"nowrap\",\r\n     //   backgroundColor:\"#3A4146\",\r\n        height: \"50px\",\r\n        padding:\"4px\",\r\n\r\n    }\r\n});\r\nexport const FlagsLeft = withStyles(styles)(function (props) {\r\n    return <div className={props.classes.root}>\r\n        <RedFlag width={\"20px\"}/>\r\n            {` X${props.flags}`}\r\n\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    dialogPaper: {\r\n        minHeight: '20vh',\r\n        maxHeight: '40vh',\r\n        minWidth: \"30vw\",\r\n        maxWidth: \"50vw\",\r\n        backgroundColor:\"white\",\r\n        opacity:\"0.5\",\r\n        border:\"double\",\r\n        borderWidth:\"4px\"\r\n    },\r\n};\r\n\r\n@withStyles(styles)\r\nclass AlertDialog extends React.Component {\r\n\r\n    render() {\r\n        const {text,title}=this.props\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={this.props.open}\r\n                    onClose={this.props.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                    classes={{paper: this.props.classes.dialogPaper}}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className={this.props.dialog} id=\"alert-dialog-description\">\r\n                          {text}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.handleOk} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlertDialog;","import * as React from \"react\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\n\r\nexport const Superman=(props)=>{\r\n    return  <div style={{display:\"flex\",alignItems:\"center\",paddingLeft:\"10px\"}}>\r\n    <FormControlLabel\r\n        control={\r\n            <Checkbox onChange={props.toggle} icon={<FavoriteBorder />} checkedIcon={<Favorite />} value={props.value} />\r\n        }\r\n    />\r\n    <div style={{position:\"relative\",right:\"20px\"}}>Superman</div>\r\n    </div>\r\n}","import * as React from \"react\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport {GameSettings} from \"./GameSettings\";\r\nimport {FlagsLeft} from \"./FlagsLeft\";\r\nimport AlertDialog from \"./assets/AlertDialog\";\r\nimport CircularProgressbar from \"react-circular-progressbar\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport {Superman} from \"./SupermanCheckbox\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"grid\",\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n        gridTemplateColumns: \"minmax(80px,min-content) min-content\",\r\n    }\r\n});\r\n\r\n@inject('GameStore')\r\n@withStyles(styles)\r\n@observer\r\nclass MineSweeperGame extends React.Component {\r\n    state = {\r\n        gameHeight: 6,\r\n        gameWidth: 6,\r\n        mines: 2,\r\n    }\r\n\r\n    startGame = () => { // needs to be from container\r\n        const {GameStore} = this.props;\r\n        GameStore.newGame(this.state.gameWidth, this.state.gameHeight, this.state.mines)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        // ev.preventDefault();\r\n        this.startGame()\r\n    }\r\n\r\n\r\n    handleTileClick = (ev) => {\r\n        const tile = ev.target.closest('.tile')\r\n        if (!tile || this.props.GameStore.loading) {\r\n            return\r\n        }\r\n        const [rowIndex, columnIndex] = tile.id.split(\"-\");\r\n        if (!rowIndex || !columnIndex) {\r\n            return\r\n        }\r\n        this.props.GameStore.handleClickTile(parseInt(rowIndex), parseInt(columnIndex), ev.shiftKey)\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const val = parseInt(ev.target.value)\r\n        this.setState({[ev.target.id]: val ? val : ''});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"game\")\r\n        const {GameStore} = this.props;\r\n        const won = GameStore.won\r\n        console.log(won)\r\n        const notValidDialog =\r\n            <AlertDialog\r\n                open={GameStore.wrongParams}\r\n                handleOk={GameStore.closeParamsDialog}\r\n                title={\"Oopsie!\"}\r\n                text=\"Valid Field size:  1-300 :Valid Mines Number: 1- Game Board Size   \"\r\n                handleClose={GameStore.closeParamsDialog}/>\r\n        const wonDialog =\r\n            <AlertDialog open={GameStore.won} handleOk={this.startGame} text=\"Can you do it again?\" title={\"Woohoo!\"}/>\r\n        const lostDialog =\r\n            <AlertDialog open={GameStore.lost} handleOk={this.startGame} text=\"Let's try again!\" title={\"Boom :(\"}/>\r\n        const noFlagsDialog =\r\n            <AlertDialog title=\"Out of flags\"\r\n                         handleOk={GameStore.hideWarning}\r\n                         open={GameStore.displayWaring} handleClose={GameStore.hideWarning}/>\r\n        return <div className={this.props.classes.root} onClick={this.handleTileClick}>\r\n            <div style={{gridColumn: \"1\", gridRow: \"2/3\", background: \"#b648f2\", padding: \"12px\"}}>\r\n                <GameSettings handleNewGame={this.handleNewGame}\r\n                              handleInput={this.handleInput} gameHeight={this.state.gameHeight}\r\n                              gameWidth={this.state.gameWidth}\r\n                              mines={this.state.mines}/>\r\n            </div>\r\n            <div style={{\r\n                color: \"white\",\r\n                gridRow: \"1\",\r\n                gridColumn: \"2/4\",\r\n                alignitems: \"center\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                background: \"#4a752c\"\r\n            }}>\r\n                <Superman toggle={GameStore.toggleSuperman}/>\r\n                <FlagsLeft flags={GameStore.minesNumber - GameStore.flags}/>\r\n\r\n            </div>\r\n            <div style={{gridRow: \"1\", gridColumn: \"1\", background: \"#ffcd1a\"}}>\r\n                <Button style={{height: \"100%\", width: \"100%\", color: \"white\"}} color=\"inherit\"\r\n                        onClick={this.handleNewGame}>\r\n                    Go!\r\n                </Button>\r\n            </div>\r\n            <div style={{gridRow: \"2/3 \", gridColumn: \"2\"}}>\r\n                {GameStore.loading && <LinearProgress/>}\r\n                <GameBoard/>\r\n            </div>\r\n            {wonDialog}\r\n            {lostDialog}\r\n            {noFlagsDialog}\r\n            {notValidDialog}\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default MineSweeperGame","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Provider} from \"mobx-react\";\nimport {MineSweeperStore} from \"./mineSweeperGame/MineSweeperStore\";\nimport MineSweeperGame from \"./mineSweeperGame/MineSweeperGame\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst gameStore = new MineSweeperStore();\nconst MineSweeper = (<Provider GameStore={gameStore}><MineSweeperGame/></Provider>);\n\nconst styles = theme => ({\n\n    root:{\n        backgroundColor:\"#2E3439\",\n        minHeight:\"100vh\",\n        display:\"flex\",\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    }\n})\n@withStyles(styles)\nclass App extends Component {\n    render() {\n        return (\n            <div className={this.props.classes.root}>\n                {MineSweeper}\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}