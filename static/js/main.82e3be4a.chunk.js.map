{"version":3,"sources":["mineSweeperGame/consts/consts.js","mineSweeperGame/storage/storageController.js","mineSweeperGame/utils/utils.js","mineSweeperGame/MineSweeperStore.js","mineSweeperGame/assets/RedFlag.js","mineSweeperGame/assets/Bomb.js","mineSweeperGame/components/GameTile.jsx","mineSweeperGame/components/GameBoard.jsx","mineSweeperGame/components/GameSettings.jsx","mineSweeperGame/components/FlagsLeft.jsx","mineSweeperGame/components/AlertDialog.jsx","mineSweeperGame/components/SupermanCheckbox.jsx","mineSweeperGame/components/TopBar.jsx","mineSweeperGame/MineSweeperGame.jsx","App.js","index.js"],"names":["BREAK_LOOP","TILE_TYPE","CLICKED","UNCLICKED","FLAG","REVEALED_MINE","MIN_BOARD_WIDTH","MIN_BOARD_HEIGHT","MIN_TILE_SIZE","MAX_OBJ_SIZE_IN_DB","MAX_WIDTH","MAX_HEIGHT","getNumberOfEntries","CC","localforage","getAllCCforCCkey","key","clearStorage","_clearStorage","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","sessionStorage","clear","stop","getSetOfRandomsInRange","min","max","n","resultSet","Set","counter","size","add","getRandomInt","Math","ceil","floor","random","getKey","i","j","concat","flushCCCells","CCCells","CCgroup","saveCCGroup","getBoundaries","row","column","height","width","top","bottom","right","left","MineSweeperStore","_class","_this","Object","classCallCheck","initializerDefineProperty","_descriptor","minesLocation","clickedCells","flaggedCells","correctFlags","_descriptor2","_descriptor3","_descriptor4","_descriptor5","boardSize","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","emptyCellsMapped","minesNumber","_descriptor11","_descriptor12","index2CC","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","shouldVisitCell","calculateAdjMines","solveGame","asyncToGenerator","mark","_callee2","CCKey","solveGameScheduler","_context2","_ref2","markConnectedComponnetsSolve","abrupt","Promise","resolve","reject","setTimeout","then","r","chooseBetweenMinesAndEmptyCells","boundary","mineCount","isAMine","visitedCells","length","undefined","parts","numOfCCItems","push","indexKey","toString","loops","cellIndex","shift","storageKey","keys","setNumberOfEntries","cell","x","getCCid","isCCForCellinStorage","_ref3","_callee3","_context3","t0","sent","_x","cleanUpAfterFlagRemoved","openedCells","isFlagCorrect","cellAlreadyRevealed","handleClickTile","toggleFlag","shouldRevealBoard","increaseClicks","handleClickMine","handleClickUnrevealedTile","emptyCellsLocation","has","placeMines","placeEmptyCells","computeCell","loading","clicked","createClass","value","flags","superman","won","lost","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this2","_callee4","_context4","numberOfClicks","wrongParams","showRules","_this3","_this4","_ref5","_callee5","_context5","clearAll","_x2","_x3","_x4","_this5","displayWaring","_this6","_ref6","_callee6","_key2","cc","_context6","assign","_x5","_x6","_this7","clickCell","_this8","_this9","_this10","_this11","_this12","_ref7","_callee7","_context7","clickAllCCfromStorage","clickConnectedCells","_x7","_x8","_this13","_this14","isValidGameParams","setLoading","setBoardParams","initGameState","res","_this15","_this16","removeFlag","remainingFlags","addFlag","_this17","_this18","_this19","shiftPressed","setHaveWon","_this20","_this21","RedFlag","props","react","id","y","viewBox","style","enableBackground","fill","d","cx","cy","Bomb","stroke","strokeWidth","strokeMiterlimit","points","styles","tile","textAlign","display","justifyContent","alignItems","boxSizing","userSelect","unrevealedTile","&:hover","backgroundColor","unrevealed0","unrevealed1","emptyTile","empty0","empty1","revealed","adj1","color","adj2","adj3","adj4","adj5","FlaggedTile","UnrevealedTile","colorType","RedFlag_RedFlag","MineTile","Bomb_Bomb","withStyles","classes","colorClass","className","join","children","EmptyTile","ClickedTile","adjMines","GameTile","_React$PureComponent","possibleConstructorReturn","getPrototypeOf","inherits","cellState","GameTile_FlaggedTile","GameTile_MineTile","adj","React","GameBoard","root","outline","padding","inject","observer","cellRenderer","_ref","columnIndex","rowIndex","GameStore","cellType","GameTile_GameTile","store","tableH","tableW","numClicks","TILE_SIZE","tileWidth","tileHeight","getTileSize","es","columnCount","rowCount","columnWidth","rowHeight","clicks","GameSettings","flexDirection","onKeyPress","ev","handleNewGame","TextField_default","label","placeholder","type","multiline","margin","gameWidth","onChange","handleInput","gameHeight","mines","FlagsLeft","fontFamily","fontSize","whiteSpace","AlertDialog","dialogPaper","minHeight","maxHeight","minWidth","maxWidth","opacity","border","borderWidth","_this$props","text","title","react_default","createElement","Dialog_default","open","onClose","handleClose","aria-labelledby","aria-describedby","paper","DialogTitle_default","DialogContent_default","DialogContentText_default","dialog","DialogActions_default","Button_default","onClick","handleOk","Component","Superman","paddingLeft","position","cursor","FormControlLabel_default","control","Checkbox_default","toggle","icon","FavoriteBorder_default","checkedIcon","Favorite_default","checked","TopBar","background","MineSweeperGame","gridTemplateColumns","gameSettings","gridColumn","gridRow","state","startGame","newGame","handleTileClick","target","closest","_tile$id$split","split","_tile$id$split2","slicedToArray","handleClickTileAndCheckWin","parseInt","shiftKey","e","val","setState","defineProperty","handleShowRules","setShowRules","handleCloseRules","NotValidDialog","components_AlertDialog","closeParamsDialog","WonDialog","LostDialog","NoFlagsDialog","hideWarning","RulesDialog","toggleSuperman","LinearProgress_default","components_GameBoard","gameStore","MineSweeper","index_module","mineSweeperGame_MineSweeperGame","App","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.82e3be4a.chunk.js","sourcesContent":["\r\nexport const BREAK_LOOP=400;\r\n\r\nexport const TILE_TYPE = {\r\n    CLICKED: \"click\",\r\n    UNCLICKED: \"notClicked\",\r\n    FLAG: \"flag\",\r\n    REVEALED_MINE: \"mine\",\r\n}\r\n\r\nexport const  MIN_BOARD_WIDTH=400\r\nexport const  MIN_BOARD_HEIGHT=400\r\nexport const MIN_TILE_SIZE=30\r\n\r\nexport const MAX_OBJ_SIZE_IN_DB = 5000;\r\n\r\nexport const MAX_WIDTH=300;\r\nexport const MAX_HEIGHT=300;\r\n","import * as localforage from \"localforage\";\r\n\r\nexport function getNumberOfEntries(CC) {\r\n    return localforage.getItem(CC)\r\n}\r\nexport function setNumberOfEntries(CC,parts) {\r\n\r\n    localforage.setItem(CC, parts);\r\n}\r\n\r\nexport function getAllCCforCCkey(key) {\r\n  return  localforage.getItem(key);\r\n}\r\nexport function saveCCGroup(key,CCgroup) {\r\n    localforage.setItem(key, CCgroup);\r\n}\r\n\r\n\r\nexport async function clearStorage() {\r\n  await localforage.clear();\r\n    sessionStorage.clear();\r\n}","import {MAX_HEIGHT, MAX_WIDTH} from \"../consts/consts\";\r\nimport {saveCCGroup} from \"../storage/storageController\";\r\n\r\nexport function getSetOfRandomsInRange(min, max, n) {\r\n    if (max - min < n) {\r\n        return;\r\n    }\r\n    const resultSet = new Set();\r\n    let counter = 0;\r\n    while (resultSet.size < n) {\r\n        resultSet.add(getRandomInt(min, max + 1));\r\n        counter++;\r\n        if (counter > n * 100000) {\r\n            throw \"Something went very wrong\"  // counter is just for safety, getRandomInt should work\r\n        }\r\n    }\r\n    return resultSet\r\n}\r\n\r\nexport function getRandomInt(min, max) { //stolen from developer.mozilla\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nexport function getKey(i, j) {\r\n    const key = `${i}-${j}`;\r\n    return key\r\n}\r\n\r\nexport function isValidGameParams(width, height, minesNumber) {\r\n    return width < MAX_WIDTH + 1 && height < MAX_HEIGHT + 1\r\n        && minesNumber < width * height && width > 0 && height > 0 && minesNumber > 0\r\n}\r\n\r\n\r\nexport function flushCCCells(key, CCCells) {\r\n    saveCCGroup(key, CCCells);\r\n}\r\n\r\nexport function getBoundaries(row, column, height, width) {\r\n    return {\r\n        top: Math.max(0, row - 1),\r\n        bottom: Math.min(row + 1, height - 1),\r\n        right: Math.min(column + 1, width - 1),\r\n        left: Math.max(0, column - 1),\r\n    }\r\n}\r\n","import {action, observable} from \"mobx\";\r\nimport {flushCCCells, getBoundaries, getKey, getSetOfRandomsInRange, isValidGameParams} from \"./utils/utils\";\r\nimport {clearStorage, getAllCCforCCkey, getNumberOfEntries, setNumberOfEntries} from \"./storage/storageController\";\r\nimport {BREAK_LOOP, MAX_OBJ_SIZE_IN_DB, TILE_TYPE} from \"./consts/consts\";\r\n\r\nexport class MineSweeperStore {\r\n\r\n    @observable superman = false;\r\n    minesLocation = new Set();\r\n    clickedCells = {}\r\n    flaggedCells = {}\r\n    correctFlags = 0;\r\n    @observable flags = 0;\r\n    @observable openedCells = 0;\r\n    @observable numberOfClicks = 0;\r\n    @observable gameNumber = 0;\r\n    boardSize = -1;\r\n    @observable width = -1;\r\n    @observable height = -1;\r\n    @observable loading = false;\r\n    @observable displayWaring = false;\r\n    @observable lost = false;\r\n    emptyCellsMapped = false\r\n    minesNumber = 0\r\n    @observable won = false\r\n    @observable showRules=true\r\n\r\n    index2CC = {}\r\n    @observable wrongParams = false\r\n\r\n    @action clearAll = async () => {\r\n        this.clickedCells = {};\r\n        this.minesLocation = {};\r\n        this.emptyCellsLocation = {};\r\n        this.flaggedCells = {};\r\n        this.index2CC = {};\r\n        this.flags = 0;\r\n        this.won = false\r\n        this.correctFlags = 0;\r\n        this.openedCells = 0;\r\n        this.numberOfClicks = 0;\r\n        this.lost = false;\r\n        this.superman=false;\r\n        this.wrongParams = false\r\n        this.showRules=false\r\n        await clearStorage();\r\n    };\r\n\r\n    @action setShowRules=(showRules)=>{\r\n        this.showRules=showRules\r\n    }\r\n    @action initGameState = async (width, height, minesNumber) => {\r\n        await this.clearAll();\r\n        const minesMapping = this.emptyCellsMapped ? this.placeEmptyCells : this.placeMines\r\n        minesMapping(width, height, minesNumber)\r\n        return this.solveGame()\r\n\r\n    };\r\n\r\n    @action hideWarning = () => {\r\n        this.displayWaring = false\r\n    }\r\n\r\n    @action clickAllCCfromStorage = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        const CC = this.index2CC[key]\r\n        const parts = await getNumberOfEntries(CC)\r\n\r\n        for (let i = 1; i <= parts; i++) {\r\n            const key = `${CC}-${i}`\r\n            const cc = await getAllCCforCCkey(key)\r\n            Object.assign(this.clickedCells, cc)\r\n        }\r\n        this.numberOfClicks++;\r\n    };\r\n\r\n    @action clickConnectedCells = (row, column) => {\r\n        const visitedCells = [];\r\n        visitedCells.push({row, column});\r\n        this.clickCell(getKey(row, column));\r\n        while (visitedCells.length > 0) {\r\n            const cellIndex = visitedCells.shift()\r\n            const {row, column} = cellIndex\r\n            const boundary = getBoundaries(row, column, this.height, this.width);\r\n\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j)\r\n                    if (this.shouldVisitCell(key, i, j)) {\r\n                        visitedCells.push({row: i, column: j})\r\n                    }\r\n                    this.clickCell(key)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clickCell = (key) => {\r\n        this.clickedCells[key] = true\r\n        this.increaseClicks();\r\n    }\r\n\r\n    @action toggleSuperman = () => {\r\n        this.superman = !this.superman\r\n    };\r\n\r\n    @action handleClickMine = () => {\r\n        this.lost = true;\r\n    };\r\n\r\n    @action closeParamsDialog = () => {\r\n        this.wrongParams = false\r\n    };\r\n\r\n    @action handleClickUnrevealedTile = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        if (this.calculateAdjMines(row, column) === 0) {\r\n            const isInStorage = await this.isCCForCellinStorage(key)\r\n            if (isInStorage) {\r\n                this.clickAllCCfromStorage(row, column)\r\n            } else {\r\n                this.clickConnectedCells(row, column)\r\n            }\r\n        }\r\n        this.clickedCells[key] = true;\r\n        this.openedCells = Object.keys(this.clickedCells).length\r\n    };\r\n\r\n    @action removeFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            this.correctFlags--\r\n        }\r\n        delete this.flaggedCells[key];\r\n        this.flags--;\r\n        this.cleanUpAfterFlagRemoved(key)\r\n    }\r\n\r\n    @action newGame = (width, height, minesNumber) => {\r\n        if (!isValidGameParams(width, height, minesNumber)) {\r\n            this.wrongParams = true\r\n            return\r\n        }\r\n        this.chooseBetweenMinesAndEmptyCells(minesNumber)\r\n        this.setLoading(true)\r\n        this.setBoardParams(width, height,minesNumber);\r\n        this.initGameState(width, height, minesNumber).then(res => {\r\n                this.setLoading(false)\r\n            }\r\n        )\r\n    };\r\n\r\n    @action addFlag = (i, j) => {\r\n        const key = getKey(i, j)\r\n        if (this.isFlagCorrect(i, j)) {\r\n            this.correctFlags++;\r\n        }\r\n        this.flags++\r\n        this.flaggedCells[key] = true\r\n    }\r\n\r\n    @action toggleFlag = (i, j) => {\r\n        const key = getKey(i, j);\r\n        const flagged = this.flaggedCells[key];\r\n        if (flagged) {\r\n            this.removeFlag(i, j)\r\n            return;\r\n        }\r\n        if (this.remainingFlags() > 0) {\r\n            this.addFlag(i, j)\r\n        } else {\r\n            this.displayWaring = true\r\n        }\r\n    };\r\n\r\n    @action increaseClicks = () => {\r\n        this.numberOfClicks++\r\n    };\r\n\r\n    @action setHaveWon=()=>{\r\n        if ((this.correctFlags + this.openedCells) === this.boardSize) {\r\n            this.won = true\r\n        }\r\n    }\r\n    @action handleClickTileAndCheckWin = (i, j, shiftPressed) => {\r\n        this.handleClickTile(i, j, shiftPressed)\r\n       this.setHaveWon()\r\n    }\r\n\r\n    @action setLoading = (loading) => {\r\n        this.loading = loading\r\n    };\r\n\r\n    @action setBoardParams = (width, height, minesNumber) => {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.boardSize = width * height;\r\n        this.minesNumber = minesNumber;\r\n    }\r\n\r\n    shouldVisitCell = (key, i, j) => {\r\n        return !this.clickedCells[key] && this.calculateAdjMines(i, j) === 0\r\n    }\r\n\r\n    solveGame = async () => {\r\n        let CCKey = 0;\r\n        const solveGameScheduler = async () => {\r\n            for (let i = 0; i < this.height; i++) {\r\n                for (let j = 0; j < this.width; j++) {\r\n                    CCKey++;\r\n                    if (!this.index2CC[(getKey(i, j))]) {\r\n                        await this.markConnectedComponnetsSolve(i, j, CCKey)\r\n                    }\r\n                }\r\n            }\r\n            return Promise.resolve(\"Game solved\")\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    solveGameScheduler().then(r => resolve(\"resolved\"))\r\n                }, 0);\r\n            }\r\n        )\r\n\r\n    };\r\n\r\n    chooseBetweenMinesAndEmptyCells = (minesNumber) => {\r\n        if (minesNumber > (this.width * this.height) / 2) {\r\n            this.emptyCellsMapped = true\r\n        }\r\n    }\r\n\r\n    calculateAdjMines = (row, column) => {\r\n        const boundary = getBoundaries(row, column, this.height, this.width);\r\n        let mineCount = 0;\r\n        for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n            for (let j = boundary.left; j <= boundary.right; j++) {\r\n                if (this.isAMine(i, j)) {\r\n                    mineCount++;\r\n                }\r\n            }\r\n        }\r\n        return mineCount;\r\n    };\r\n\r\n    markConnectedComponnetsSolve = (row, column, CC, visitedCells = [], CCCells = {}, parts = 1, numOfCCItems = 0) => {\r\n        visitedCells.push({row, column})\r\n        const indexKey = getKey(row, column);\r\n        this.index2CC[indexKey] = CC.toString()\r\n        CCCells[indexKey] = true;\r\n        numOfCCItems++;\r\n        let loops = 0;\r\n        while (loops < BREAK_LOOP && visitedCells.length > 0) {\r\n            loops++;\r\n            const cellIndex = visitedCells.shift();\r\n            const {row, column} = cellIndex;\r\n            if (numOfCCItems > MAX_OBJ_SIZE_IN_DB) {\r\n                const key = `${CC}-${parts}`;\r\n                flushCCCells(key, CCCells)\r\n                CCCells = {};\r\n                parts++;\r\n                numOfCCItems = 0;\r\n            }\r\n            const boundary = getBoundaries(row, column, this.height, this.width)\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j);\r\n                    const isSaved = this.index2CC[key]\r\n                    if (!isSaved) {\r\n                        this.index2CC[key] = CC.toString()\r\n                        if (this.calculateAdjMines(i, j) === 0) {\r\n                            visitedCells.push({row: i, column: j})\r\n                        }\r\n                        CCCells[key] = true;\r\n                        numOfCCItems++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (visitedCells.length < 1) {\r\n            const storageKey = `${CC}-${parts}`;\r\n            if ((Object.keys(CCCells).length + ((parts - 1) * MAX_OBJ_SIZE_IN_DB)) >= MAX_OBJ_SIZE_IN_DB) {\r\n                flushCCCells(storageKey, CCCells);\r\n                setNumberOfEntries(CC.toString(), parts)\r\n            }\r\n            return new Promise((resolve, reject) => resolve(\"good promise\"))\r\n        }\r\n\r\n        const cell = visitedCells.shift()\r\n        return new Promise(resolve => setTimeout(() => {\r\n            this.markConnectedComponnetsSolve(cell.row,\r\n                cell.column, CC, visitedCells, CCCells, parts, numOfCCItems).then(x => resolve(x))\r\n        }, 0))\r\n\r\n    };\r\n\r\n    getCCid = (key) => {\r\n        return this.index2CC[key]\r\n    }\r\n\r\n    isCCForCellinStorage = async (key) => {\r\n        const CC = this.getCCid(key)\r\n        return CC && await getNumberOfEntries(CC)\r\n    }\r\n\r\n    cleanUpAfterFlagRemoved = (key) => {\r\n        if (this.clickedCells[key]) {\r\n            delete this.clickedCells[key]\r\n            this.openedCells--;\r\n        }\r\n    }\r\n\r\n    isFlagCorrect = (i, j) => {\r\n        return this.isAMine(i, j)\r\n    }\r\n\r\n\r\n    cellAlreadyRevealed = (key) => {\r\n       return this.clickedCells[key] && !this.flaggedCells[key]\r\n    }\r\n\r\n    handleClickTile = (i, j, toggleFlag) => {\r\n        const key = getKey(i, j);\r\n        if (this.shouldRevealBoard() || this.cellAlreadyRevealed(key)) {\r\n            return\r\n        }\r\n        this.increaseClicks();\r\n        if (toggleFlag) {\r\n            this.toggleFlag(i, j);\r\n            return\r\n        }\r\n        if(this.flaggedCells[key]){\r\n            return\r\n        }\r\n        if (this.isAMine(i, j)) {\r\n            this.handleClickMine(i, j);\r\n            return;\r\n        }\r\n        this.handleClickUnrevealedTile(i, j);\r\n    };\r\n\r\n    isAMine = (i, j) => {\r\n        return this.emptyCellsMapped ?\r\n            !this.emptyCellsLocation.has(i * this.width + j) : this.minesLocation.has(i * this.width + j)\r\n    };\r\n\r\n\r\n    remainingFlags() {\r\n        return this.minesNumber - this.flags\r\n    }\r\n\r\n    placeMines = (width, height, minesNumber) => {\r\n        this.minesLocation = getSetOfRandomsInRange(0, width * height - 1, minesNumber)\r\n    }\r\n\r\n    placeEmptyCells = (width, height, minesNumber) => {\r\n        const size = width * height\r\n        this.emptyCellsLocation = getSetOfRandomsInRange(0, width * height - 1, size - minesNumber)\r\n\r\n    };\r\n\r\n    computeCell = (i, j) => {\r\n        if (this.loading) {\r\n            return TILE_TYPE.UNCLICKED\r\n        }\r\n        const key = getKey(i, j)\r\n        const clicked = this.shouldRevealBoard() || this.clickedCells[key]\r\n\r\n        if (this.isAMine(i, j) && clicked) {\r\n            return TILE_TYPE.REVEALED_MINE\r\n        }\r\n        if (this.flaggedCells[key] && !this.shouldRevealBoard()) {\r\n            return TILE_TYPE.FLAG\r\n        }\r\n        return clicked ? TILE_TYPE.CLICKED : TILE_TYPE.UNCLICKED\r\n\r\n    }\r\n\r\n    shouldRevealBoard() {\r\n        return this.superman || this.won || this.lost\r\n    }\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const RedFlag = function (props) {\r\n    return <svg id=\"Layer_1\"\r\n                x=\"0px\" y=\"0px\" viewBox=\"0 0 511.999 511.999\" style={\r\n                    {enableBackground:\"new 0 0 511.999 511.999\",width:props.width,height:props.height}}>\r\n<path style={{fill:\"#E21B1B\"}}\r\n      d=\"M103.919,51.744c0,0,41.296,33.496,109.008,18.4c64.2-14.264,124.056-30.464,224.616,5.856v215.032  c0,0-92.488-44.104-176.736-24.432s-131.88,12.12-156.888-12.888\"/>\r\n        <rect x=\"90.74\" y=\"37.524\" style={{fill:\"#999999\"}} width=\"16\" height=\"474.475\"/>\r\n        <circle style={{fill:\"#666666\"}} cx=\"98.741\" cy=\"24.284\" r=\"24.284\"/>\r\n</svg>\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const Bomb=function (props) {\r\n  //  const {width=\"90%\",height=\"90%\"}={props}\r\n    return <svg  id=\"Layer_1\" x=\"0px\" y=\"0px\" width={props.width} height={props.height} viewBox=\"0 0 512 512\" enableBackground=\"new 0 0 512 512\" >\r\n<g>\r\n\t<path d=\"M218.255,131.197c16.958,0,33.379,2.285,48.987,6.542V91.448h-92.995v45.008   C188.357,133.027,203.091,131.197,218.255,131.197z\"/>\r\n    <circle fill=\"#020202\" cx=\"218.255\" cy=\"316.947\" r=\"171.502\"/>\r\n    <path fill=\"none\" stroke=\"#000000\" strokeWidth=\"10\" strokeMiterlimit=\"10\" d=\"M218.255,108.849c0,0-6.776-113.407,92.398-60   c79.104,42.599,117,17,117,17\"/>\r\n    <polygon points=\"422.598,23.551 430.759,46.499 452.756,36.042 442.3,58.04 465.247,66.2 442.3,74.36 452.756,96.358    430.759,85.901 422.598,108.849 414.438,85.901 392.441,96.358 402.897,74.36 379.948,66.2 402.897,58.04 392.441,36.042    414.438,46.499  \"/>\r\n</g>\r\n</svg>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"../assets/RedFlag\";\r\nimport {Bomb} from \"../assets/Bomb\";\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {TILE_TYPE} from \"../consts/consts\";\r\n\r\nconst styles = () => ({\r\n        tile: {\r\n            textAlign: \"center\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            boxSizing: \"border-box\",\r\n            userSelect: \"none\"\r\n\r\n        },\r\n        unrevealedTile: {\r\n\r\n            '&:hover':\r\n                {\r\n                    backgroundColor: \"#b3e652\",\r\n                },\r\n        },\r\n        unrevealed0: {\r\n            backgroundColor: \"#a2d149\",\r\n        },\r\n        unrevealed1: {\r\n            backgroundColor: \"#aad751\",\r\n        },\r\n        emptyTile: {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n        empty0: {\r\n            backgroundColor: \"#d7b899\",\r\n        },\r\n        empty1: {\r\n            backgroundColor: \"#e5c29f\",\r\n        },\r\n        revealed: {\r\n            backgroundColor: \"#FFFAFA\"\r\n        },\r\n        adj1: {\r\n            color: \"#005EFF\"\r\n        },\r\n        adj2: {\r\n            color: \"#56CD56\"\r\n        },\r\n        adj3: {\r\n            color: \"#FFAB00\"\r\n        },\r\n        adj4: {\r\n            color: \"#FF3300\"\r\n        },\r\n        adj5: {\r\n            color: \"#FF0044\"\r\n        },\r\n\r\n    })\r\n;\r\n\r\nconst FlaggedTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}>\r\n        <RedFlag width=\"70%\"/>\r\n    </UnrevealedTile>\r\n}\r\n\r\nconst MineTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}>\r\n        <Bomb width=\"70%\"/>\r\n    </UnrevealedTile>\r\n}\r\n\r\nconst UnrevealedTile = withStyles(styles)(function (props) {\r\n    const colorType = props.colorType\r\n    const classes = props.classes\r\n    const colorClass = props.classes[`unrevealed${colorType}`]\r\n    return <div className={[classes.tile, classes.unrevealedTile, colorClass].join(' ')}>\r\n        {props.children}\r\n    </div>\r\n})\r\n\r\nconst EmptyTile = withStyles(styles)(function (props) {\r\n    const colorClass = props.classes[`empty${props.colorType}`]\r\n    return <div className={[props.classes.emptyTile, colorClass].join(' ')}>{props.children}</div>\r\n})\r\n\r\nconst ClickedTile = withStyles(styles)(function (props) {\r\n    const {adjMines} = props\r\n    const className = adjMines > 5 ? props.classes.adj5 : props.classes[`adj${adjMines}`]\r\n    return <div className={[props.classes.tile, className].join(\" \")}>\r\n        <EmptyTile colorType={props.colorType}>\r\n            {adjMines > 0 && adjMines}\r\n        </EmptyTile>\r\n    </div>\r\n})\r\n\r\nexport class GameTile extends React.PureComponent {\r\n    render() {\r\n        return (() => {\r\n            switch (this.props.cellState) {\r\n                case TILE_TYPE.FLAG:\r\n                    return <FlaggedTile id='flagged' colorType={this.props.colorType}/>;\r\n                case TILE_TYPE.REVEALED_MINE:\r\n                    return <MineTile id='mine-tile' colorType={this.props.colorType}/>\r\n                case TILE_TYPE.UNCLICKED:\r\n                    return <UnrevealedTile id='unrevealed-tile' colorType={this.props.colorType}/>\r\n                case TILE_TYPE.CLICKED:\r\n                    return <ClickedTile id='clicked'  colorType={this.props.colorType} adjMines={this.props.adj}/>;\r\n                default:\r\n                    return null;\r\n            }\r\n        })()\r\n    }\r\n\r\n};","import * as React from \"react\"\r\nimport {Grid} from \"react-virtualized\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {GameTile} from \"./GameTile\";\r\nimport {MIN_BOARD_HEIGHT, MIN_BOARD_WIDTH, MIN_TILE_SIZE, TILE_TYPE} from \"../consts/consts\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        outline: 'none',\r\n        padding: \"0 18px 18px 0\",\r\n\r\n    }\r\n});\r\n\r\n\r\n@withStyles(styles)\r\n@inject('GameStore')\r\n@observer\r\nclass GameBoard extends React.Component {\r\n\r\n    cellRenderer = ({columnIndex, key, rowIndex, style}) => {\r\n        const {GameStore} = this.props\r\n        const cellType = GameStore.computeCell(rowIndex, columnIndex)\r\n        const adj = cellType === TILE_TYPE.CLICKED ? GameStore.calculateAdjMines(rowIndex, columnIndex) : -1;\r\n        const colorType = (rowIndex + columnIndex) % 2\r\n        return <div className=\"tile\" id={`${rowIndex}-${columnIndex}`} key={key} style={style}>\r\n            <GameTile colorType={colorType} adj={adj} cellState={cellType}/>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        const store = this.props.GameStore\r\n        const tableH = Math.min(store.height, 20)\r\n        const tableW = Math.min(store.width, 20)\r\n        const superman = store.superman\r\n        const numClicks = store.numberOfClicks\r\n        const TILE_SIZE = getTileSize(tableW, tableH)\r\n\r\n        return <Grid cellRenderer={this.cellRenderer}\r\n                     columnCount={store.width}\r\n                     className={this.props.root}\r\n                     rowCount={store.height}\r\n                     columnWidth={TILE_SIZE}\r\n                     height={tableH * TILE_SIZE}\r\n                     width={tableW * TILE_SIZE}\r\n                     rowHeight={TILE_SIZE}\r\n                     clicks={numClicks}\r\n                     superman={superman}\r\n        >\r\n        </Grid>\r\n    }\r\n}\r\n\r\nfunction getTileSize(width, height) {\r\n\r\n    const tileWidth = (MIN_BOARD_WIDTH / width) < MIN_TILE_SIZE ?\r\n        MIN_TILE_SIZE : Math.floor(MIN_BOARD_WIDTH / width)\r\n    const tileHeight = (MIN_BOARD_HEIGHT / height) < MIN_TILE_SIZE ?\r\n        MIN_TILE_SIZE : Math.floor(MIN_BOARD_HEIGHT / height)\r\n\r\n    return Math.min(tileWidth, tileHeight)\r\n}\r\n\r\nexport default GameBoard","import * as React from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n\r\n    root: {\r\n        display:\"flex\",\r\n        alignItems:\"flex-end\"\r\n        ,flexDirection:\"column\"\r\n    },\r\n\r\n});\r\n\r\nexport const GameSettings =withStyles(styles)( (props) => {\r\n\r\n    function handleKeyPress(ev){\r\n        if(ev.key===\"Enter\"){\r\n            props.handleNewGame()\r\n        }\r\n    }\r\n\r\n    return <div   className={props.classes.root} onKeyPress={handleKeyPress}>\r\n        <TextField\r\n            id=\"gameWidth\"\r\n            label=\"Columns\"\r\n            placeholder=\"6\"\r\n            type=\"number\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameWidth}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Rows\"\r\n            placeholder=\"6\"\r\n            type=\"number\" id=\"gameHeight\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameHeight}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Mines\"\r\n            placeholder=\"6\"\r\n            multiline\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            id=\"mines\"\r\n            onChange={props.handleInput}\r\n            value={props.mines}\r\n        />\r\n    </div>\r\n})","import * as React from \"react\"\r\nimport {RedFlag} from \"../assets/RedFlag\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n\r\n    root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontSize:\"16px\",\r\n        width:\"fit-content\",\r\n        whiteSpace: \"nowrap\",\r\n        height: \"50px\",\r\n        padding:\"4px\",\r\n\r\n    }\r\n});\r\nexport const FlagsLeft = withStyles(styles)(function (props) {\r\n    return <div className={props.classes.root}>\r\n        <RedFlag width={\"20px\"}/>\r\n            {` X${props.flags}`}\r\n\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    dialogPaper: {\r\n        minHeight: '20vh',\r\n        maxHeight: '40vh',\r\n        minWidth: \"30vw\",\r\n        maxWidth: \"50vw\",\r\n        backgroundColor:\"white\",\r\n        opacity:\"0.6\",\r\n        border:\"double\",\r\n        borderWidth:\"4px\",\r\n        textAlign:\"center\"\r\n    },\r\n};\r\n\r\n@withStyles(styles)\r\nclass AlertDialog extends React.Component {\r\n\r\n    render() {\r\n        const {text,title}=this.props\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={this.props.open}\r\n                    onClose={this.props.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                    classes={{paper: this.props.classes.dialogPaper}}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className={this.props.dialog} id=\"alert-dialog-description\">\r\n                          {text}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.handleOk} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlertDialog;","import * as React from \"react\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n        root: {\r\n            display: \"flex\", alignItems: \"center\", paddingLeft: \"10px\"\r\n        },\r\n        label: {\r\n            position: \"relative\",\r\n            right: \"20px\",\r\n            '&:hover': {\r\n                cursor: \"pointer\"\r\n            }\r\n        },\r\n    }\r\n);\r\n\r\nexport const Superman = withStyles(styles)((props) => {\r\n    return <div className={props.classes.root}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox onChange={props.toggle} icon={<FavoriteBorder/>} checkedIcon={<Favorite/>}\r\n                          checked={props.value}/>\r\n            }\r\n        />\r\n        <div id='superman' onClick={props.toggle} className={props.classes.label}>Superman</div>\r\n    </div>\r\n})","import * as React from 'react'\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        color: \"white\",\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        background: \"#4a752c\"\r\n    }\r\n});\r\n\r\nexport const TopBar = withStyles(styles)((props) => {\r\n    return <div className={props.classes.root} style={props.style}>\r\n        {props.children}\r\n    </div>\r\n})","import * as React from \"react\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport {GameSettings} from \"./components/GameSettings\";\r\nimport {FlagsLeft} from \"./components/FlagsLeft\";\r\nimport AlertDialog from \"./components/AlertDialog\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport {Superman} from \"./components/SupermanCheckbox\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {TopBar} from \"./components/TopBar\";\r\n\r\nconst styles = () => ({\r\n\r\n    root: {\r\n        display: \"grid\",\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n        gridTemplateColumns: \"minmax(80px,min-content) min-content\",\r\n    },\r\n    gameSettings: {\r\n        gridColumn: \"1\",\r\n        gridRow: \"2/3\",\r\n        background: \"#b648f2\",\r\n        padding: \"12px\"\r\n    }\r\n});\r\n\r\n@inject('GameStore')\r\n@withStyles(styles)\r\n@observer\r\nclass MineSweeperGame extends React.Component {\r\n    state = {\r\n        gameHeight: 6,\r\n        gameWidth: 6,\r\n        mines: 2,\r\n    }\r\n\r\n    startGame = () => {\r\n        const {GameStore} = this.props;\r\n        GameStore.newGame(this.state.gameWidth, this.state.gameHeight, this.state.mines)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n        this.handleShowRules()\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        this.startGame()\r\n    }\r\n\r\n\r\n    handleTileClick = (ev) => {\r\n        const tile = ev.target.closest('.tile')\r\n        if (!tile || this.props.GameStore.loading) {\r\n            return\r\n        }\r\n        const [rowIndex, columnIndex] = tile.id.split(\"-\");\r\n        if (!rowIndex || !columnIndex) {\r\n            throw \"failed to parse tile id\"\r\n        }\r\n        try {\r\n            this.props.GameStore.handleClickTileAndCheckWin(parseInt(rowIndex), parseInt(columnIndex), ev.shiftKey)\r\n        } catch (e) {\r\n            throw \"probably failed to parse tile id\" + e\r\n        }\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const val = parseInt(ev.target.value)\r\n        this.setState({[ev.target.id]: val ? val : ''});\r\n    }\r\n\r\n    handleShowRules=()=>{\r\n        const {GameStore}=this.props\r\n        GameStore.setShowRules(true)\r\n    }\r\n    handleCloseRules=()=>{\r\n        const {GameStore}=this.props\r\n        GameStore.setShowRules(false)\r\n    }\r\n    render() {\r\n        const {GameStore,classes} = this.props;\r\n        const NotValidDialog =\r\n            <AlertDialog\r\n                open={GameStore.wrongParams}\r\n                handleOk={GameStore.closeParamsDialog}\r\n                title={\"Oopsie!\"}\r\n                text=\"Valid Field size:  1-300 :Valid Mines Number: 1- Game Board Size   \"\r\n                handleClose={GameStore.closeParamsDialog}/>\r\n        const WonDialog =\r\n            <AlertDialog open={GameStore.won}\r\n                         handleOk={this.startGame}\r\n                         text=\"Can you do it again?\"\r\n                         title={\"Woohoo!\"}/>\r\n        const LostDialog =\r\n            <AlertDialog\r\n                open={GameStore.lost}\r\n                handleOk={this.startGame}\r\n                text=\"Let's try again!\"\r\n                title={\"Boom :(\"}/>\r\n        const NoFlagsDialog =\r\n            <AlertDialog title=\"Out of flags\"\r\n                         handleOk={GameStore.hideWarning}\r\n                         open={GameStore.displayWaring}\r\n                         handleClose={GameStore.hideWarning}/>\r\n\r\n        const RulesDialog =\r\n            <AlertDialog title=\"Hey You! \"\r\n                         text=\"Use Shift key and click to place flags\"\r\n                         handleOk={this.handleCloseRules}\r\n                         open={GameStore.showRules}\r\n                         handleClose={this.handleCloseRules}/>\r\n\r\n        return <div id='game-cotainer' className={classes.root} onClick={this.handleTileClick}>\r\n            <div className={classes.gameSettings}>\r\n                <GameSettings handleNewGame={this.handleNewGame}\r\n                              handleInput={this.handleInput} gameHeight={this.state.gameHeight}\r\n                              gameWidth={this.state.gameWidth}\r\n                              mines={this.state.mines}/>\r\n            </div>\r\n            <TopBar style={{gridRow: \"1\", gridColumn: \"2/4\"}}>\r\n                <Superman toggle={GameStore.toggleSuperman} value={GameStore.superman}/>\r\n                <FlagsLeft flags={GameStore.minesNumber - GameStore.flags}/>\r\n            </TopBar>\r\n            <div style={{gridRow: \"1\", gridColumn: \"1\", background: \"#ffcd1a\"}}>\r\n                <Button id='new-game-button' style={{height: \"100%\", width: \"100%\", color: \"white\"}} color=\"inherit\"\r\n                        onClick={this.handleNewGame}>\r\n                    Go!\r\n                </Button>\r\n            </div>\r\n            <div style={{gridRow: \"2/3 \", gridColumn: \"2\"}}>\r\n                {GameStore.loading && <LinearProgress/>}\r\n                <GameBoard/>\r\n            </div>\r\n            {WonDialog}\r\n            {LostDialog}\r\n            {NoFlagsDialog}\r\n            {NotValidDialog}\r\n            {RulesDialog}\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default MineSweeperGame","import React, {Component} from 'react';\nimport {Provider} from \"mobx-react\";\nimport {MineSweeperStore} from \"./mineSweeperGame/MineSweeperStore\";\nimport MineSweeperGame from \"./mineSweeperGame/MineSweeperGame\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst gameStore = new MineSweeperStore();\nconst MineSweeper = (<Provider GameStore={gameStore}><MineSweeperGame/></Provider>);\n\nconst styles = () => ({\n\n    root:{\n        backgroundColor:\"#2E3439\",\n        minHeight:\"100vh\",\n        display:\"flex\",\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    }\n})\n\n@withStyles(styles)\nclass App extends Component {\n    render() {\n        return (\n            <div className={this.props.classes.root}>\n                {MineSweeper}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}