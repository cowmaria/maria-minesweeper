{"version":3,"sources":["logo.svg","consts.js","mineSweeperGame/storageController.js","mineSweeperGame/utils/utils.js","mineSweeperGame/MineSweeperStore.js","mineSweeperGame/assets/RedFlag.js","mineSweeperGame/assets/Bomb.js","mineSweeperGame/GameTile.jsx","mineSweeperGame/GameBoard.js","mineSweeperGame/GameSettings.js","mineSweeperGame/FlagsLeft.js","mineSweeperGame/assets/AlertDialog.js","mineSweeperGame/SupermanCheckbox.js","mineSweeperGame/MineSweeperGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TILE_TYPE","CLICKED","UNCLICKED","FLAG","REVEALED_MINE","MAX_OBJ_SIZE_IN_DB","MAX_WIDTH","MAX_HEIGHT","getNumberOfEntries","CC","localforage","getAllCCforCCkey","key","clearStorage","_clearStorage","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","sessionStorage","clear","stop","getSetOfRandomsInRange","min","max","n","resultSet","Set","counter","size","add","getRandomInt","Math","ceil","floor","random","getKey","i","j","concat","flushCCCells","CCCells","CCgroup","Object","keys","length","saveCCGroup","getBoundreis","row","column","height","width","top","bottom","right","left","MineSweeperStore","_class","_this","classCallCheck","initializerDefineProperty","_descriptor","minesLocation","clickedCells","flaggedCells","correctFlags","_descriptor2","_descriptor3","_descriptor4","_descriptor5","boardSize","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","emptyCellsMapped","minesNumber","index2CC","_descriptor11","_descriptor12","solveGame","asyncToGenerator","mark","_callee2","CCKey","solveGameScheduler","_context2","_ref2","markConnectedComponnetsSolve","abrupt","Promise","resolve","reject","setTimeout","then","r","_descriptor13","shouldVisitCell","calculateAdjMines","_descriptor14","_descriptor15","_descriptor16","chooseBetweenMinesAndEmptyCells","_descriptor17","boundary","mineCount","isAMine","visitedCells","undefined","parts","numOfCCItems","push","indexKey","toString","loops","cellIndex","shift","storageKey","setNumberOfEntries","cell","x","_descriptor18","getCCid","isCCForCellinStorage","_ref3","_callee3","_context3","t0","sent","_x","_descriptor19","_descriptor20","cleanUpAfterFlagRemoved","openedCells","_descriptor21","isFlagCorrect","_descriptor22","_descriptor23","_descriptor24","handleClickTile","shiftPressed","superman","increaseClicks","toggleFlag","handleClickMine","handleClickEmptyTile","_descriptor25","emptyCellsLocation","has","_descriptor26","_descriptor27","placeMines","placeEmptyCells","createClass","value","flags","get","won","lost","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","_this2","displayWaring","_this3","per","percantage","_this4","_this5","clickCell","_this6","_callee4","_context4","numberOfClicks","_this7","_ref5","_callee5","_context5","clearAll","_x2","_x3","_x4","_this8","isValidGameParams","setLoading","setBoardParams","initGameState","res","_this9","_ref6","_callee6","_key2","cc","_context6","assign","_x5","_x6","_this10","_ref7","_callee7","_context7","clickAllCCfromStorage","clickConnectedCells","_x7","_x8","_this11","_this12","_this13","_this14","removeFlag","remainingFlags","addFlag","_this15","_this16","loading","_this17","mines","_this18","RedFlag","props","react","id","y","viewBox","style","enableBackground","fill","d","cx","cy","Bomb","stroke","strokeWidth","strokeMiterlimit","points","styles","theme","tile","textAlign","display","justifyContent","alignItems","boxSizing","unrevealedTile","&:hover","backgroundColor","unrevealed0","unrevealed1","emptyTile","empty0","empty1","revealed","adj1","color","adj2","adj3","adj4","adj5","FlaggedTile","UnrevealedTile","colorType","RedFlag_RedFlag","MineTile","Bomb_Bomb","withStyles","classes","colorClass","className","join","children","EmptyTile","ClickedTile","adjMines","GameTile","_React$PureComponent","possibleConstructorReturn","getPrototypeOf","inherits","console","log","cellState","GameTile_FlaggedTile","GameTile_MineTile","adj","React","GameBoard","inject","observer","computeCell","store","GameStore","clicked","revealBoard","cellRenderer","_ref","columnIndex","rowIndex","cellType","GameTile_GameTile","tableH","tableW","TILE_SIZE","numClicks","es","columnCount","outline","rowCount","columnWidth","rowHeight","clicks","GameSettings","flexDirection","onKeyPress","ev","handleNewGame","TextField_default","label","placeholder","type","multiline","margin","gameWidth","onChange","handleInput","gameHeight","FlagsLeft","root","fontFamily","fontSize","whiteSpace","padding","AlertDialog","dialogPaper","minHeight","maxHeight","minWidth","maxWidth","opacity","border","borderWidth","_this$props","text","title","react_default","createElement","Dialog_default","open","onClose","handleClose","aria-labelledby","aria-describedby","paper","DialogTitle_default","DialogContent_default","DialogContentText_default","dialog","DialogActions_default","Button_default","onClick","handleOk","Component","Superman","paddingLeft","FormControlLabel_default","control","Checkbox_default","toggle","icon","FavoriteBorder_default","checkedIcon","Favorite_default","position","MineSweeperGame","gridTemplateColumns","state","startGame","newGame","handleTileClick","target","closest","_tile$id$split","split","_tile$id$split2","slicedToArray","parseInt","shiftKey","val","setState","defineProperty","wonDialog","assets_AlertDialog","lostDialog","noFlagsDialog","hideWarning","gridColumn","gridRow","background","GameSettings_GameSettings","alignitems","SupermanCheckbox_Superman","toggleSuperman","LinearProgress_default","mineSweeperGame_GameBoard","gameStore","MineSweeper","index_module","mineSweeperGame_MineSweeperGame","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+TCC3BC,UAAY,CACrBC,QAAS,QACTC,UAAW,aACXC,KAAM,OACNC,cAAe,SAMNC,EAAqB,IAErBC,EAAU,IACVC,EAAW,YCJjB,SAASC,EAAmBC,GAC/B,OAAOC,UAAoBD,GAOxB,SAASE,EAAiBC,GAC/B,OAAQF,UAAoBE,GAWvB,SAAeC,KAAtB,OAAAC,GAAAC,MAAAC,KAAAC,wDAAO,SAAAC,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACCd,UADD,OAEHe,eAAeC,QAFZ,wBAAAJ,EAAAK,SAAAT,6BC3BA,SAASU,GAAuBC,EAAKC,EAAKC,GAC7C,KAAID,EAAMD,EAAME,GAAhB,CAKA,IAFA,IAAMC,EAAY,IAAIC,IAClBC,EAAU,EACPF,EAAUG,KAAOJ,GAGpB,GAFAC,EAAUI,IAAIC,GAAaR,EAAKC,EAAM,MACtCI,EACkB,IAAJH,EACV,KAAM,4BAGd,OAAOC,GAGX,SAASK,GAAaR,EAAKC,GAGvB,OAFAD,EAAMS,KAAKC,KAAKV,GAChBC,EAAMQ,KAAKE,MAAMV,GACVQ,KAAKE,MAAMF,KAAKG,UAAYX,EAAMD,IAAQA,EAG9C,SAASa,GAAOC,EAAGC,GAEtB,MADS,GAAAC,OAAMF,EAAN,KAAAE,OAAWD,GAUjB,SAASE,GAAalC,EAAKmC,IDf3B,SAAqBnC,EAAIoC,GAEzBC,OAAOC,KAAKF,GAASG,OAGxBzC,UAAoBE,EAAKoC,GCWzBI,CAAYxC,EAAKmC,GAGd,SAASM,GAAaC,EAAKC,EAAQC,EAAQC,GAC9C,MAAO,CACHC,IAAKpB,KAAKR,IAAI,EAAGwB,EAAM,GACvBK,OAAQrB,KAAKT,IAAIyB,EAAM,EAAGE,EAAS,GACnCI,MAAOtB,KAAKT,IAAI0B,EAAS,EAAGE,EAAQ,GACpCI,KAAMvB,KAAKR,IAAI,EAAGyB,EAAS,IC1B5B,gBAAMO,IAAbC,EAAA,oBAAAD,IAAA,IAAAE,EAAAhD,KAAAiC,OAAAgB,EAAA,EAAAhB,CAAAjC,KAAA8C,GAAAb,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,WAAAmD,EAAAnD,WAGIoD,cAAgB,IAAInC,IAHxBjB,KAIIqD,aAAe,GAJnBrD,KAKIsD,aAAe,GALnBtD,KAMIuD,aAAa,EANjBtB,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,QAAAwD,EAAAxD,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,cAAAyD,EAAAzD,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,iBAAA0D,EAAA1D,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,aAAA2D,EAAA3D,WAWI4D,WAAa,EAXjB3B,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,QAAA6D,EAAA7D,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,SAAA8D,EAAA9D,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,UAAA+D,EAAA/D,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,gBAAAgE,EAAAhE,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,OAAAiE,EAAAjE,WAiBIkE,kBAAmB,EAjBvBlE,KAkBImE,YAAY,EAlBhBnE,KAoBIoE,SAAW,GApBfnC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,cAAAqE,EAAArE,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,gBAAAsE,EAAAtE,WAoCIuE,UApCJtC,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KAoCgB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAzE,EAAAC,EAAAC,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,cACJmE,EAAQ,EACNC,EAFE,eAAAE,EAAA7C,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KAEmB,SAAAvE,IAAA,IAAAyB,EAAAC,EAAA,OAAAzB,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACdmB,EAAI,EADU,YACPA,EAAIqB,EAAKR,QADF,CAAAlC,EAAAE,KAAA,SAGVoB,EAAI,EAHM,YAGHA,EAAIoB,EAAKP,OAHN,CAAAnC,EAAAE,KAAA,YAIfmE,IACK3B,EAAKoB,SAAU1C,GAAOC,EAAGC,IALf,CAAAtB,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAMLwC,EAAK+B,6BAA6BpD,EAAGC,EAAG+C,GANnC,OAGa/C,IAHbtB,EAAAE,KAAA,gBACUmB,IADVrB,EAAAE,KAAA,uBAAAF,EAAA0E,OAAA,SAUhBC,QAAQC,QAAQ,gBAVA,yBAAA5E,EAAAK,SAAAT,MAFnB,yBAAA4E,EAAA/E,MAAAC,KAAAC,YAAA,GAAA4E,EAAAG,OAAA,SAeD,IAAIC,QAAQ,SAACC,EAASC,GACrBC,WAAW,WACPR,IAAqBS,KAAK,SAAAC,GAAC,OAAIJ,EAAQ,eACxC,MAlBH,wBAAAL,EAAAlE,SAAA+D,MApChBzC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,YAAAuF,EAAAvF,WAiEIwF,gBAAkB,SAAC5F,EAAK+B,EAAGC,GACvB,OAAQoB,EAAKK,aAAazD,IAAyC,IAAjCoD,EAAKyC,kBAAkB9D,EAAGC,IAlEpEK,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,sBAAA0F,EAAA1F,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,WAAA2F,EAAA3F,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,gBAAA4F,EAAA5F,WAwHI6F,gCAAkC,SAAC1B,GAC3BA,EAAe5E,EAAaD,EAAa,IACzC0D,EAAKkB,kBAAmB,IA1HpCjC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,UAAA8F,EAAA9F,WA2IIyF,kBAAoB,SAACnD,EAAKC,GAGtB,IAFA,IAAMwD,EAAW1D,GAAaC,EAAKC,EAAQS,EAAKR,OAAQQ,EAAKP,OACzDuD,EAAY,EACPrE,EAAIoE,EAASrD,IAAKf,GAAKoE,EAASpD,OAAQhB,IAC7C,IAAK,IAAIC,EAAImE,EAASlD,KAAMjB,GAAKmE,EAASnD,MAAOhB,IACzCoB,EAAKiD,QAAQtE,EAAGC,IAChBoE,IAIZ,OAAOA,GArJfhG,KAwJI+E,6BAA+B,SAACzC,EAAKC,EAAQ9C,GAAqE,IAAjEyG,EAAiEjG,UAAAkC,OAAA,QAAAgE,IAAAlG,UAAA,GAAAA,UAAA,GAAlD,GAAI8B,EAA8C9B,UAAAkC,OAAA,QAAAgE,IAAAlG,UAAA,GAAAA,UAAA,GAApC,GAAImG,EAAgCnG,UAAAkC,OAAA,QAAAgE,IAAAlG,UAAA,GAAAA,UAAA,GAAxB,EAAGoG,EAAqBpG,UAAAkC,OAAA,QAAAgE,IAAAlG,UAAA,GAAAA,UAAA,GAAN,EACxGiG,EAAaI,KAAK,CAAChE,MAAKC,WACxB,IAAMgE,EAAW7E,GAAOY,EAAKC,GAC7BS,EAAKoB,SAASmC,GAAY9G,EAAG+G,WAC7BzE,EAAQwE,IAAY,EACpBF,IAEA,IADA,IAAII,EAAQ,EACLA,EAAQ,KAAOP,EAAa/D,OAAS,GAAG,CAC3CsE,IACA,IAAMC,EAAYR,EAAaS,QACxBrE,EAAeoE,EAAfpE,IAAKC,EAAUmE,EAAVnE,OACZ,GAAI8D,EAAehH,EAEfyC,GADS,GAAAD,OAAMpC,EAAN,KAAAoC,OAAYuE,GACHrE,GAClBA,EAAU,GACVqE,IACAC,EAAe,EAGnB,IADA,IAAMN,EAAW1D,GAAaC,EAAKC,EAAQS,EAAKR,OAAQQ,EAAKP,OACpDd,EAAIoE,EAASrD,IAAKf,GAAKoE,EAASpD,OAAQhB,IAC7C,IAAK,IAAIC,EAAImE,EAASlD,KAAMjB,GAAKmE,EAASnD,MAAOhB,IAAK,CAClD,IAAMhC,EAAM8B,GAAOC,EAAGC,GACNoB,EAAKoB,SAASxE,KAE1BoD,EAAKoB,SAASxE,GAAOH,EAAG+G,WACa,IAAjCxD,EAAKyC,kBAAkB9D,EAAGC,IAC1BsE,EAAaI,KAAK,CAAChE,IAAKX,EAAGY,OAAQX,IAEvCG,EAAQnC,IAAO,EACfyG,MAMhB,GAAIH,EAAa/D,OAAS,EAAG,CACzB,IAAMyE,EAAU,GAAA/E,OAAMpC,EAAN,KAAAoC,OAAYuE,GAK5B,OAJKnE,OAAOC,KAAKH,GAASI,QAAWiE,EAAQ,GAAK/G,GAAwBA,IACtEyC,GAAa8E,EAAY7E,GFpMlC,SAA4BtC,EAAG2G,GAElC1G,UAAoBD,EAAI2G,GEmMZS,CAAmBpH,EAAG+G,WAAYJ,IAE/B,IAAInB,QAAQ,SAACC,EAASC,GAAV,OAAqBD,EAAQ,kBAGpD,IAAM4B,EAAOZ,EAAaS,QAC1B,OAAO,IAAI1B,QAAQ,SAAAC,GAAO,OAAIE,WAAW,WACrCpC,EAAK+B,6BAA6B+B,EAAKxE,IACnCwE,EAAKvE,OAAQ9C,EAAIyG,EAAcnE,EAASqE,EAAOC,GAAchB,KAAK,SAAA0B,GAAC,OAAI7B,EAAQ6B,MACpF,MAxMX9E,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,wBAAAgH,EAAAhH,WA6RIiH,QAAU,SAACrH,GACP,OAAOoD,EAAKoB,SAASxE,IA9R7BI,KAiSIkH,qBAjSJ,eAAAC,EAAAlF,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KAiS2B,SAAA2C,EAAOxH,GAAP,IAAAH,EAAA,OAAAU,EAAAC,EAAAC,KAAA,SAAAgH,GAAA,cAAAA,EAAA9G,KAAA8G,EAAA7G,MAAA,UACbf,EAAKuD,EAAKiE,QAAQrH,GADLyH,EAAAC,GAEZ7H,GAFY4H,EAAAC,GAAA,CAAAD,EAAA7G,KAAA,eAAA6G,EAAA7G,KAAA,EAEAhB,EAAmBC,GAFnB,OAAA4H,EAAAC,GAAAD,EAAAE,KAAA,cAAAF,EAAArC,OAAA,SAAAqC,EAAAC,IAAA,wBAAAD,EAAA1G,SAAAyG,MAjS3B,gBAAAI,GAAA,OAAAL,EAAApH,MAAAC,KAAAC,YAAA,GAAAgC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,uBAAAyH,EAAAzH,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,kBAAA0H,EAAA1H,WA2TI2H,wBAAwB,SAAC/H,GACjBoD,EAAKK,aAAazD,YACVoD,EAAKK,aAAazD,GACzBoD,EAAK4E,gBA9TlB3F,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,aAAA6H,EAAA7H,WA4UI8H,cAAc,SAACnG,EAAEC,GACb,OAAOoB,EAAKiD,QAAQtE,EAAEC,IA7U9BK,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,UAAA+H,EAAA/H,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,aAAAgI,EAAAhI,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,iBAAAiI,EAAAjI,WA8WIkI,gBAAkB,SAACvG,EAAGC,EAAGuG,GACrB,IAAInF,EAAKoF,SAAT,CAGA,IAAMxI,EAAM8B,GAAOC,EAAGC,GAClBoB,EAAKK,aAAazD,KAASoD,EAAKM,aAAa1D,KAGjDoD,EAAKqF,iBACDF,EACAnF,EAAKsF,WAAW3G,EAAGC,GAGpBoB,EAAKM,aAAa1D,KAGjBoD,EAAKiD,QAAQtE,EAAGC,GAChBoB,EAAKuF,gBAAgB5G,EAAGC,GAG5BoB,EAAKwF,qBAAqB7G,EAAGC,OAlYrCK,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,aAAAyI,EAAAzI,WA0YIiG,QAAU,SAACtE,EAAGC,GACV,OAAOoB,EAAKkB,kBACPlB,EAAK0F,mBAAmBC,IAAIhH,EAAIqB,EAAKP,MAAQb,GAAIoB,EAAKI,cAAcuF,IAAIhH,EAAIqB,EAAKP,MAAQb,IA5YtGK,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,iBAAA4I,EAAA5I,MAAAiC,OAAAiB,EAAA,EAAAjB,CAAAjC,KAAA,iBAAA6I,EAAA7I,WAoaI8I,WAAa,SAACrG,EAAOD,EAAQ2B,GACzBnB,EAAKI,cAAgBxC,GAAuB,EAAG6B,EAAQD,EAAS,EAAG2B,IAra3EnE,KAwaI+I,gBAAkB,SAACtG,EAAOD,EAAQ2B,GAC9B,IAAMhD,EAAOsB,EAAQD,EACrBQ,EAAK0F,mBAAqB9H,GAAuB,EAAG6B,EAAQD,EAAS,EAAGrB,EAAOgD,IA1avF,OAAAlC,OAAA+G,EAAA,EAAA/G,CAAAa,EAAA,EAAAlD,IAAA,iBAAAqJ,MAAA,WAoZQ,OAAOjJ,KAAKmE,YAAcnE,KAAKkJ,QApZvC,CAAAtJ,IAAA,cAAAuJ,IAAA,WAuBQ,OAAOnJ,KAAKoI,UAAYpI,KAAKoJ,KAAOpJ,KAAKqJ,OAvBjD,CAAAzJ,IAAA,MAAAuJ,IAAA,WAgZQ,OAAOnJ,KAAKuD,aAAevD,KAAK4H,cAAgB5H,KAAK4D,cAhZ7Dd,EAAA,GAAAK,EAAAlB,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,YAEKC,KAFL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAE2B,KAF3BpG,EAAAvB,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,SAOKC,KAPL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAOwB,KAPxBnG,EAAAxB,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,eAQKC,KARL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAQ8B,KAR9BlG,EAAAzB,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,kBASKC,KATL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBASiC,KATjCjG,EAAA1B,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,cAUKC,KAVL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAU6B,KAV7B/F,EAAA5B,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,SAYKC,KAZL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAYyB,KAZzB9F,EAAA7B,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,UAaKC,KAbL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAa0B,KAb1B7F,EAAA9B,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,WAcKC,KAdL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAc0B,KAd1B5F,EAAA/B,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,iBAeKC,KAfL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAegC,KAfhC3F,EAAAhC,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,QAgBKC,KAhBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAgBuB,KAhBvB3H,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,eAsBKM,KAtBL5H,OAAA6H,yBAAA/G,EAAAwG,UAAA,eAAAxG,EAAAwG,WAAAlF,EAAApC,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,eA0BKQ,KA1BL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAI,EAAAhK,KAAA,OA0B0B,WAClBgK,EAAKC,eAAgB,MA3B7B3F,EAAArC,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,iBA8BKQ,KA9BL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAM,EAAAlK,KAAA,OA8B4B,SAACmK,GACjBD,EAAKE,WAAaD,IAClBD,EAAKE,WAAaD,OAhC9B5E,EAAAtD,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,aA4DKQ,KA5DL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAS,EAAArK,KAAA,OA4DwB,SAACJ,GACjByK,EAAKhH,aAAazD,IAAO,EACzByK,EAAKhC,qBA9Db3C,EAAAzD,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,uBAqEKQ,KArEL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAU,EAAAtK,KAAA,OAqEkC,SAACsC,EAAKC,GAChC,IAAM2D,EAAe,GAGrB,IAFAA,EAAaI,KAAK,CAAChE,MAAKC,WACxB+H,EAAKC,UAAU7I,GAAOY,EAAKC,IACpB2D,EAAa/D,OAAS,GAKzB,IAJA,IAAMuE,EAAYR,EAAaS,QAEzBZ,EAAW1D,GADKqE,EAAfpE,IAAeoE,EAAVnE,OAC+B+H,EAAK9H,OAAQ8H,EAAK7H,OAEpDd,EAAIoE,EAASrD,IAAKf,GAAKoE,EAASpD,OAAQhB,IAC7C,IAAK,IAAIC,EAAImE,EAASlD,KAAMjB,GAAKmE,EAASnD,MAAOhB,IAAK,CAClD,IAAMhC,EAAM8B,GAAOC,EAAGC,GAClB0I,EAAK9E,gBAAgB5F,EAAK+B,EAAGC,IAC7BsE,EAAaI,KAAK,CAAChE,IAAKX,EAAGY,OAAQX,IAEvC0I,EAAKC,UAAU3K,QApFnC+F,EAAA1D,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,YA2FKQ,KA3FL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAY,EAAAxK,KAAA,OAAAiC,OAAAuC,EAAA,GAAArE,EAAAC,EAAAqE,KA2FuB,SAAAgG,IAAA,OAAAtK,EAAAC,EAAAC,KAAA,SAAAqK,GAAA,cAAAA,EAAAnK,KAAAmK,EAAAlK,MAAA,cACfgK,EAAKnH,aAAe,GACpBmH,EAAKpH,cAAgB,GACrBoH,EAAK9B,mBAAqB,GAC1B8B,EAAKlH,aAAe,GACpBkH,EAAKpG,SAAW,GAChBoG,EAAKtB,MAAQ,EACbsB,EAAKjH,aAAa,EAClBiH,EAAK5C,YAAc,EACnB4C,EAAKG,eAAe,EACpBH,EAAKrG,YAAY,EACjBqG,EAAKnB,MAAO,EAXGqB,EAAAlK,KAAA,GAaTX,KAbS,yBAAA6K,EAAA/J,SAAA8J,SA3FvB7E,EAAA3D,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,iBA2GKQ,KA3GL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAgB,EAAA5K,KAAA,sBAAA6K,EAAA5I,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KA2G4B,SAAAqG,EAAOrI,EAAOD,EAAQ2B,GAAtB,OAAAhE,EAAAC,EAAAC,KAAA,SAAA0K,GAAA,cAAAA,EAAAxK,KAAAwK,EAAAvK,MAAA,cAAAuK,EAAAvK,KAAA,EACdoK,EAAKI,WADS,cAEpBJ,EAAKzG,YAAYA,EACbyG,EAAK1G,iBACL0G,EAAK7B,gBAAgBtG,EAAOD,EAAQ2B,GAEpCyG,EAAK9B,WAAWrG,EAAOD,EAAQ2B,GANf4G,EAAA/F,OAAA,SAQb4F,EAAKrG,aARQ,wBAAAwG,EAAApK,SAAAmK,MA3G5B,gBAAAG,EAAAC,EAAAC,GAAA,OAAAN,EAAA9K,MAAAC,KAAAC,YAAA,MAAA6F,EAAA7D,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,WA8HKQ,KA9HL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAwB,EAAApL,KAAA,OA8HsB,SAACyC,EAAOD,EAAQ2B,IDnH/B,SAA2B1B,EAAOD,EAAQ2B,GAC7C,OAAO1B,EAAQnD,EAAY,GAAKkD,EAASjD,EAAa,GAC/C4E,EAAc1B,EAAQD,GAAUC,EAAQ,GAAKD,EAAS,GAAK2B,EAAc,GCkHvEkH,CAAkB5I,EAAOD,EAAQ2B,KAGtCiH,EAAKvF,gCAAgC1B,GACrCiH,EAAKE,YAAW,GAChBF,EAAKG,eAAe9I,EAAOD,GAC3B4I,EAAKI,cAAc/I,EAAOD,EAAQ2B,GAAakB,KAAK,SAAAoG,GAC5CL,EAAKE,YAAW,UAtIhCtE,EAAA/E,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,yBA8QKQ,KA9QL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA8B,EAAA1L,KAAA,sBAAA2L,EAAA1J,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KA8QoC,SAAAmH,EAAOtJ,EAAKC,GAAZ,IAAA3C,EAAAH,EAAA2G,EAAAzE,EAAAkK,EAAAC,EAAA,OAAA3L,EAAAC,EAAAC,KAAA,SAAA0L,GAAA,cAAAA,EAAAxL,KAAAwL,EAAAvL,MAAA,cACtBZ,EAAM8B,GAAOY,EAAKC,GAClB9C,EAAKiM,EAAKtH,SAASxE,GAFGmM,EAAAvL,KAAA,EAGRhB,EAAmBC,GAHX,OAGtB2G,EAHsB2F,EAAAxE,KAKnB5F,EAAI,EALe,YAKZA,GAAKyE,GALO,CAAA2F,EAAAvL,KAAA,gBAMlBZ,EANkB,GAAAiC,OAMTpC,EANS,KAAAoC,OAMHF,GANGoK,EAAAvL,KAAA,GAOPb,EAAiBC,GAPV,QAOlBkM,EAPkBC,EAAAxE,KAQxBtF,OAAO+J,OAAON,EAAKrI,aAAcyI,GART,QAKAnK,IALAoK,EAAAvL,KAAA,gBAU5BkL,EAAKf,iBAVuB,yBAAAoB,EAAApL,SAAAiL,MA9QpC,gBAAAK,EAAAC,GAAA,OAAAP,EAAA5L,MAAAC,KAAAC,YAAA,MAAAwH,EAAAxF,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,wBAsSKQ,KAtSL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAuC,EAAAnM,KAAA,sBAAAoM,EAAAnK,OAAAuC,EAAA,EAAAvC,CAAA9B,EAAAC,EAAAqE,KAuS2B,SAAA4H,EAAO/J,EAAKC,GAAZ,IAAA3C,EAAA,OAAAO,EAAAC,EAAAC,KAAA,SAAAiM,GAAA,cAAAA,EAAA/L,KAAA+L,EAAA9L,MAAA,UACbZ,EAAM8B,GAAOY,EAAKC,GACoB,IAAxC4J,EAAK1G,kBAAkBnD,EAAKC,GAFb,CAAA+J,EAAA9L,KAAA,eAAA8L,EAAA9L,KAAA,EAGW2L,EAAKjF,qBAAqBtH,GAHrC,OAAA0M,EAAA/E,KAKX4E,EAAKI,sBAAsBjK,EAAKC,GAEhC4J,EAAKK,oBAAoBlK,EAAKC,GAPnB,OAUnB4J,EAAK9I,aAAazD,IAAO,EACzBuM,EAAKvE,YAAY3F,OAAOC,KAAKiK,EAAK9I,cAAclB,OAX7B,wBAAAmK,EAAA3L,SAAA0L,MAvS3B,gBAAAI,EAAAC,GAAA,OAAAN,EAAArM,MAAAC,KAAAC,YAAA,MAAAyH,EAAAzF,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,mBAsTKQ,KAtTL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA+C,EAAA3M,KAAA,OAuTsB,SAAC2B,EAAGC,GAClB+K,EAAKtD,MAAO,MAxTpBxB,EAAA5F,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,cAkUKQ,KAlUL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAgD,EAAA5M,KAAA,OAkUyB,SAAC2B,EAAEC,GACpB,IAAMhC,EAAI8B,GAAOC,EAAEC,GAChBgL,EAAK9E,cAAcnG,EAAEC,IACpBgL,EAAKrJ,sBAEFqJ,EAAKtJ,aAAa1D,GACzBgN,EAAK1D,QACL0D,EAAKjF,wBAAwB/H,OAzUrCmI,EAAA9F,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,WAgVKQ,KAhVL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAiD,EAAA7M,KAAA,OAgVsB,SAAC2B,EAAEC,GACzB,IAAMhC,EAAI8B,GAAOC,EAAEC,GACRiL,EAAK/E,cAAcnG,EAAEC,IACpBiL,EAAKtJ,eAETsJ,EAAK3D,QACL2D,EAAKvJ,aAAa1D,IAAO,MAtVjCoI,EAAA/F,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,cA0VKQ,KA1VL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAkD,EAAA9M,KAAA,OA2ViB,SAAC2B,EAAGC,GACb,IAAMhC,EAAM8B,GAAOC,EAAGC,GACNkL,EAAKxJ,aAAa1D,GAE9BkN,EAAKC,WAAWpL,EAAEC,GAGlBkL,EAAKE,iBAAmB,EACxBF,EAAKG,QAAQtL,EAAEC,GAEfkL,EAAK7C,eAAgB,MArWjChC,EAAAhG,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,kBAyWKQ,KAzWL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAsD,EAAAlN,KAAA,OA0WqB,WACbkN,EAAKvC,qBA3WblC,EAAAxG,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,cAsYKQ,KAtYL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAuD,EAAAnN,KAAA,OAsYyB,SAACoN,GAClBD,EAAKC,QAAUA,MAvYvBnL,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,OA+YKM,KA/YL5H,OAAA6H,yBAAA/G,EAAAwG,UAAA,OAAAxG,EAAAwG,WAAAX,EAAA3G,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,kBAuZKQ,KAvZL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAyD,EAAArN,KAAA,OAwZqB,SAACyC,EAAOD,EAAQ2B,GAC7BkJ,EAAK5K,MAAQA,EACb4K,EAAK7K,OAASA,EACd6K,EAAKzJ,UAAYnB,EAAQD,EACzB6K,EAAKC,MAAQnJ,MA5ZrB0E,EAAA5G,OAAAqH,EAAA,EAAArH,CAAAc,EAAAwG,UAAA,kBA+ZKQ,KA/ZL,CAAAN,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA2D,EAAAvN,KAAA,OAgaqB,WACbuN,EAAKnF,UAAYmF,EAAKnF,aAja9BrF,iCCjBayK,GAAU,SAAUC,GAC7B,OAAOC,EAAA,qBAAKC,GAAG,UACH5G,EAAE,MAAM6G,EAAE,MAAMC,QAAQ,sBAAsBC,MAC1C,CAACC,iBAAiB,0BAA0BtL,MAAMgL,EAAMhL,MAAMD,OAAOiL,EAAMjL,SAC/FkL,EAAA,sBAAMI,MAAO,CAACE,KAAK,WACbC,EAAE,oKACAP,EAAA,sBAAM3G,EAAE,QAAQ6G,EAAE,SAASE,MAAO,CAACE,KAAK,WAAYvL,MAAM,KAAKD,OAAO,YACtEkL,EAAA,wBAAQI,MAAO,CAACE,KAAK,WAAYE,GAAG,SAASC,GAAG,SAAS7I,EAAE,aCPtD8I,GAAK,SAAUX,GAExB,OAAOC,EAAA,qBAAMC,GAAG,UAAU5G,EAAE,MAAM6G,EAAE,MAAMnL,MAAOgL,EAAMhL,MAAOD,OAAQiL,EAAMjL,OAAQqL,QAAQ,cAAcE,iBAAiB,mBAC/HL,EAAA,uBACCA,EAAA,sBAAMO,EAAE,kIACLP,EAAA,wBAAQM,KAAK,UAAUE,GAAG,UAAUC,GAAG,UAAU7I,EAAE,YACnDoI,EAAA,sBAAMM,KAAK,OAAOK,OAAO,UAAUC,YAAY,KAAKC,iBAAiB,KAAKN,EAAE,gFAC5EP,EAAA,yBAASc,OAAO,6PCHdC,GAAS,SAAAC,GAAK,MAAK,CAErBC,KAAM,CACFC,UAAU,SACVC,QAAQ,OACRC,eAAe,SACfC,WAAW,SACXtM,MAAM,OACND,OAAO,OACPwM,UAAU,cAGdC,eAAe,CAEXC,UAAW,CACPC,gBAAiB,YAGzBC,YAAY,CACRD,gBAAiB,WAGrBE,YAAY,CACRF,gBAAiB,WAErBG,UAAU,CACN7M,MAAM,OACND,OAAO,OACPqM,QAAQ,OACRC,eAAe,SACfC,WAAW,UAGfQ,OAAO,CACHJ,gBAAgB,WAEpBK,OAAO,CACHL,gBAAgB,WAEpBM,SAAU,CACNN,gBAAiB,WAGrBO,KAAM,CACFC,MAAO,WAEXC,KAAM,CACFD,MAAO,WAEXE,KAAM,CACFF,MAAO,WAEXG,KAAM,CACFH,MAAO,WAEXI,KAAM,CACFJ,MAAO,aAMTK,GAAc,SAAUvC,GAC1B,OAAOC,EAAA,cAACuC,GAAD,CAAgBC,UAAWzC,EAAMyC,WAAWxC,EAAA,cAACyC,GAAD,CAAS1N,MAAO,UAGjE2N,GAAW,SAAU3C,GACvB,OAAOC,EAAA,cAACuC,GAAD,CAAgBC,UAAWzC,EAAMyC,WAAWxC,EAAA,cAAC2C,GAAD,CAAM5N,MAAO,UAG9DwN,GAAiBK,sBAAW7B,GAAX6B,CAAmB,SAAU7C,GAChD,IAAMyC,EAAUzC,EAAMyC,UAChBK,EAAQ9C,EAAM8C,QACdC,EAAW/C,EAAM8C,QAAN,aAAA1O,OAA2BqO,IAC5C,OAAOxC,EAAA,qBAAK+C,UAAW,CAACF,EAAQ5B,KAAK4B,EAAQtB,eAAgBuB,GAAYE,KAAK,MAAOjD,EAAMkD,YAGzFC,GAAYN,sBAAW7B,GAAX6B,CAAmB,SAAU7C,GAC3C,IAAM+C,EAAW/C,EAAM8C,QAAN,QAAA1O,OAAuB4L,EAAMyC,YAC9C,OAAOxC,EAAA,qBAAK+C,UAAW,CAAChD,EAAM8C,QAAQjB,UAAUkB,GAAYE,KAAK,MAAQjD,EAAMkD,YAI7EE,GAAcP,sBAAW7B,GAAX6B,CAAmB,SAAU7C,GAAO,IAC7CqD,EAAYrD,EAAZqD,SACDL,EAAYK,EAAW,EAAIrD,EAAM8C,QAAQR,KAAOtC,EAAM8C,QAAN,MAAA1O,OAAoBiP,IAC1E,OAAOpD,EAAA,qBAAK+C,UAAW,CAAChD,EAAM8C,QAAQ5B,KAAM8B,GAAWC,KAAK,MACxDhD,EAAA,cAACkD,GAAD,CAAWV,UAAWzC,EAAMyC,WAAYY,EAAW,GAAKA,MAGnDC,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA9O,OAAAgB,EAAA,EAAAhB,CAAAjC,KAAA+Q,GAAA9O,OAAAgP,EAAA,EAAAhP,CAAAjC,KAAAiC,OAAAiP,EAAA,EAAAjP,CAAA8O,GAAAhR,MAAAC,KAAAC,YAAA,OAAAgC,OAAAkP,EAAA,EAAAlP,CAAA8O,EAAAC,GAAA/O,OAAA+G,EAAA,EAAA/G,CAAA8O,EAAA,EAAAnR,IAAA,SAAAqJ,MAAA,WACa,IAAAjG,EAAAhD,KAEL,OADAoR,QAAQC,IAAI,QACJ,WACJ,OAAQrO,EAAKyK,MAAM6D,WACf,KAAKtS,EAAUG,KACX,OAAOuO,EAAA,cAAC6D,GAAD,CAAarB,UAAWlN,EAAKyK,MAAMyC,YAC9C,KAAKlR,EAAUI,cACX,OAAOsO,EAAA,cAAC8D,GAAD,CAAUtB,UAAWlN,EAAKyK,MAAMyC,YAC3C,KAAKlR,EAAUE,UACX,OAAOwO,EAAA,cAACuC,GAAD,CAAgBC,UAAWlN,EAAKyK,MAAMyC,YACjD,KAAKlR,EAAUC,QACX,OAAOyO,EAAA,cAACmD,GAAD,CAAaX,UAAWlN,EAAKyK,MAAMyC,UAAWY,SAAU9N,EAAKyK,MAAMgE,MAC9E,QACI,OAAO,MAXX,OAHhBV,EAAA,CAA8BW,iBC9BfC,GA3DdC,YAAO,gBACPC,0NAGGC,YAAc,SAACnQ,EAAGC,GACtBwP,QAAQC,IAAI,UAAU1P,EAAEC,GAChB,IAAMmQ,EAAQ/O,EAAKyK,MAAMuE,UACzB,GAAGD,EAAM3E,QACL,OAAOpO,EAAUE,UAErB,IAAMU,EAAM8B,GAAOC,EAAGC,GAEhBqQ,EAAUF,EAAMG,aAAeH,EAAM1O,aAAazD,GAExD,OAAImS,EAAM9L,QAAQtE,EAAGC,IAAMqQ,EAChBjT,EAAUI,cAEjB2S,EAAMzO,aAAa1D,KAASmS,EAAMG,YAC3BlT,EAAUG,KAEd8S,EAAUjT,EAAUC,QAAUD,EAAUE,aAInDiT,aAAe,SAAAC,GAAyC,IAAvCC,EAAuCD,EAAvCC,YAAazS,EAA0BwS,EAA1BxS,IAAK0S,EAAqBF,EAArBE,SAAUxE,EAAWsE,EAAXtE,MAClCkE,EAAahP,EAAKyK,MAAlBuE,UACPZ,QAAQC,IAAI,WACZ,IAAMkB,EAAWvP,EAAK8O,YAAYQ,EAAUD,GACtCZ,EAAMc,IAAavT,EAAUC,QAAU+S,EAAUvM,kBAAkB6M,EAAUD,IAAgB,EAC7FnC,GAAaoC,EAAWD,GAAe,EAC7C,OAAO3E,EAAA,qBAAK+C,UAAU,OAAO9C,GAAE,GAAA9L,OAAKyQ,EAAL,KAAAzQ,OAAiBwQ,GAAezS,IAAKA,EAAKkO,MAAOA,GAC5EJ,EAAA,cAAC8E,GAAD,CAAUtC,UAAWA,EAAWuB,IAAKA,EAAKH,UAAWiB,8EAKzD,IAAMR,EAAQ/R,KAAKyN,MAAMuE,UACnBS,EAASnR,KAAKT,IAAIkR,EAAMvP,OAAO,IAC/BkQ,EAASpR,KAAKT,IAAIkR,EAAMtP,MAAM,IAC9B2F,EAAW2J,EAAM3J,SACvBgJ,QAAQC,IAAI,UACZ,IAAMsB,EPxCgB,IOwCeD,EPvClB,MOuC2DpR,KAAKE,MPxC7D,IOwCsFkR,GAC5GtB,QAAQC,IPzCc,IOyCMqB,EAAOC,GACnC,IAAMC,EAAYb,EAAMpH,eACxB,OAAO+C,EAAA,cAACmF,GAAA,EAAD,CAAMV,aAAcnS,KAAKmS,aACnBW,YAAaf,EAAMtP,MACnBqL,MAAO,CAACiF,QAAS,QACjBC,SAAUjB,EAAMvP,OAChByQ,YAAaN,EACbnQ,OAAQiQ,EAASE,EACjBlQ,MAAOiQ,EAASC,EAChBO,UAAWP,EACXQ,OAAQP,EACRxK,SAAUA,WAnDPsJ,2CCJX0B,GAAe,SAAC3F,GASzB,OAAOC,EAAA,qBAAKC,GAAG,IAAIG,MAAO,CAACe,QAAQ,OAAOE,WAAW,WAAWsE,cAAc,UAAWC,WAPzF,SAAwBC,GACpBnC,QAAQC,IAAI,MAAMkC,GACN,UAATA,EAAG3T,KACF6N,EAAM+F,kBAKV9F,EAAA,cAAC+F,GAAArT,EAAD,CACIuN,GAAG,YACH+F,MAAM,UACNC,YAAY,IACZC,KAAK,SACLC,WAAS,EACTC,OAAO,SAEP7K,MAAOwE,EAAMsG,UACbC,SAAUvG,EAAMwG,cAEpBvG,EAAA,cAAC+F,GAAArT,EAAD,CACIsT,MAAM,OACNC,YAAY,IACZC,KAAK,SAASjG,GAAG,aACjBkG,WAAS,EACTC,OAAO,SACP7K,MAAOwE,EAAMyG,WACbF,SAAUvG,EAAMwG,cAEpBvG,EAAA,cAAC+F,GAAArT,EAAD,CACIsT,MAAM,QACNC,YAAY,IACZE,WAAS,EACTC,OAAO,SACPF,KAAK,SACLjG,GAAG,QACHqG,SAAUvG,EAAMwG,YAChBhL,MAAOwE,EAAMH,UCtBZ6G,GAAY7D,sBAhBV,SAAA5B,GAAK,MAAK,CAErB0F,KAAM,CACFvF,QAAS,OACTE,WAAY,SACZD,eAAgB,aAChBuF,WAAY,6CACZC,SAAS,OACT7R,MAAM,cACN8R,WAAY,SAEZ/R,OAAQ,OACRgS,QAAQ,SAISlE,CAAmB,SAAU7C,GAClD,OAAOC,EAAA,qBAAK+C,UAAWhD,EAAM8C,QAAQ6D,MACjC1G,EAAA,cAACyC,GAAD,CAAS1N,MAAO,SADb,KAAAZ,OAEO4L,EAAMvE,uIC6BTuL,GA/BdnE,sBAbc,CACXoE,YAAa,CACTC,UAAW,OACXC,UAAW,OACXC,SAAU,OACVC,SAAU,OACV3F,gBAAgB,QAChB4F,QAAQ,MACRC,OAAO,SACPC,YAAY,6LAOP,IAAAC,EACclV,KAAKyN,MAAjB0H,EADFD,EACEC,KAAKC,EADPF,EACOE,MACZ,OACIC,EAAAjV,EAAAkV,cAAA,WACID,EAAAjV,EAAAkV,cAACC,GAAAnV,EAAD,CACIoV,KAAMxV,KAAKyN,MAAM+H,KACjBC,QAASzV,KAAKyN,MAAMiI,YACpBC,kBAAgB,qBAChBC,mBAAiB,2BACjBrF,QAAS,CAACsF,MAAO7V,KAAKyN,MAAM8C,QAAQmE,cAEpCW,EAAAjV,EAAAkV,cAACQ,GAAA1V,EAAD,CAAauN,GAAG,sBAAsByH,GACtCC,EAAAjV,EAAAkV,cAACS,GAAA3V,EAAD,KACIiV,EAAAjV,EAAAkV,cAACU,GAAA5V,EAAD,CAAmBqQ,UAAWzQ,KAAKyN,MAAMwI,OAAQtI,GAAG,4BACjDwH,IAGPE,EAAAjV,EAAAkV,cAACY,GAAA9V,EAAD,KACIiV,EAAAjV,EAAAkV,cAACa,GAAA/V,EAAD,CAAQgW,QAASpW,KAAKyN,MAAM4I,SAAU1G,MAAM,WAA5C,gBApBE+B,IAAM4E,6GChBnBC,GAAS,SAAC9I,GACnB,OAAQC,EAAA,qBAAKI,MAAO,CAACe,QAAQ,OAAOE,WAAW,SAASyH,YAAY,SACpE9I,EAAA,cAAC+I,GAAArW,EAAD,CACIsW,QACIhJ,EAAA,cAACiJ,GAAAvW,EAAD,CAAU4T,SAAUvG,EAAMmJ,OAAQC,KAAMnJ,EAAA,cAACoJ,GAAA1W,EAAD,MAAoB2W,YAAarJ,EAAA,cAACsJ,GAAA5W,EAAD,MAAc6I,MAAOwE,EAAMxE,UAG5GyE,EAAA,qBAAKI,MAAO,CAACmJ,SAAS,WAAWrU,MAAM,SAAvC,mCC8FWsU,GArFdtF,YAAO,gBACPtB,sBAXc,SAAA5B,GAAK,MAAK,CAErB0F,KAAM,CACFvF,QAAS,OACT2F,QAAS,OACTV,OAAQ,OACRqD,oBAAqB,8CAM5BtF,0NAEGuF,MAAQ,CACJlD,WAAY,EACZH,UAAW,EACXzG,MAAO,KAGX+J,UAAY,WACYrU,EAAKyK,MAAlBuE,UACGsF,QAAQtU,EAAKoU,MAAMrD,UAAW/Q,EAAKoU,MAAMlD,WAAYlR,EAAKoU,MAAM9J,UAO9EkG,cAAgB,WAEZxQ,EAAKqU,eAITE,gBAAkB,SAAChE,GACf,IAAM5E,EAAO4E,EAAGiE,OAAOC,QAAQ,SAC/B,GAAK9I,IAAQ3L,EAAKyK,MAAMuE,UAAU5E,QAAlC,CAFsB,IAAAsK,EAKU/I,EAAKhB,GAAGgK,MAAM,KALxBC,EAAA3V,OAAA4V,GAAA,EAAA5V,CAAAyV,EAAA,GAKfpF,EALesF,EAAA,GAKLvF,EALKuF,EAAA,GAMjBtF,GAAaD,GAGlBrP,EAAKyK,MAAMuE,UAAU9J,gBAAgB4P,SAASxF,GAAWwF,SAASzF,GAAckB,EAAGwE,cAGvF9D,YAAc,SAACV,GACX,IAAMyE,EAAMF,SAASvE,EAAGiE,OAAOvO,OAC/BjG,EAAKiV,SAALhW,OAAAiW,GAAA,EAAAjW,CAAA,GAAgBsR,EAAGiE,OAAO7J,GAAKqK,GAAY,yFAvB3ChY,KAAKqX,6CA2BLjG,QAAQC,IAAI,QADP,IAEEW,EAAahS,KAAKyN,MAAlBuE,UACD5I,EAAI4I,EAAU5I,IACpBgI,QAAQC,IAAIjI,GACZ,IAAM+O,EACFzK,EAAA,cAAC0K,GAAD,CAAa5C,KAAMxD,EAAU5I,IAAKiN,SAAUrW,KAAKqX,UAAWlC,KAAK,uBAAuBC,MAAO,YAC7FiD,EACF3K,EAAA,cAAC0K,GAAD,CAAa5C,KAAMxD,EAAU3I,KAAMgN,SAAUrW,KAAKqX,UAAWlC,KAAK,mBAAmBC,MAAO,YAC1FkD,EACF5K,EAAA,cAAC0K,GAAD,CAAahD,MAAM,eACNiB,SAAUrE,EAAUuG,YACpB/C,KAAMxD,EAAU/H,cAAeyL,YAAa1D,EAAUuG,cACvE,OAAO7K,EAAA,qBAAK+C,UAAWzQ,KAAKyN,MAAM8C,QAAQ6D,KAAMgC,QAASpW,KAAKuX,iBAC1D7J,EAAA,qBAAKI,MAAO,CAAE0K,WAAY,IAAKC,QAAQ,MAAMC,WAAW,UAAUlE,QAAQ,SACtE9G,EAAA,cAACiL,GAAD,CAAcnF,cAAexT,KAAKwT,cACpBS,YAAajU,KAAKiU,YAAaC,WAAYlU,KAAKoX,MAAMlD,WACtDH,UAAW/T,KAAKoX,MAAMrD,UACtBzG,MAAOtN,KAAKoX,MAAM9J,SAEpCI,EAAA,qBAAKI,MAAO,CAAC6B,MAAM,QAAQ8I,QAAS,IAAKD,WAAW,MAAMI,WAAW,SAAU/J,QAAQ,OAAOC,eAAe,gBAAgB4J,WAAW,YACpIhL,EAAA,cAACmL,GAAD,CAAUjC,OAAQ5E,EAAU8G,iBAC5BpL,EAAA,cAACyG,GAAD,CAAWjL,MAAO8I,EAAU7N,YAAc6N,EAAU9I,SAGxDwE,EAAA,qBAAMI,MAAO,CAAC2K,QAAQ,IAAID,WAAW,IAAIE,WAAW,YAChDhL,EAAA,cAACyI,GAAA/V,EAAD,CAAQ0N,MAAO,CAACtL,OAAO,OAAOC,MAAM,OAAOkN,MAAM,SAAUA,MAAM,UAAUyG,QAASpW,KAAKwT,eAAzF,QAIJ9F,EAAA,qBAAKI,MAAO,CAAC2K,QAAS,OAAQD,WAAY,MACrCxG,EAAU5E,SAAWM,EAAA,cAACqL,GAAA3Y,EAAD,MACjBsN,EAAA,cAACsL,GAAD,OAERb,EACAE,EACAC,UA3EiB5G,4BClBxBuH,GAAY,IAAInW,GAChBoW,GAAe7D,EAAAjV,EAAAkV,cAAC6D,EAAA,EAAD,CAAUnH,UAAWiH,IAAW5D,EAAAjV,EAAAkV,cAAC8D,GAAD,OAwBtCC,GAZd/I,sBAVc,SAAA5B,GAAK,MAAK,CAErB0F,KAAK,CACDjF,gBAAgB,UAChBwF,UAAU,QACV9F,QAAQ,OACRC,eAAe,SACfC,WAAW,iMAMX,OACIsG,EAAAjV,EAAAkV,cAAA,OAAK7E,UAAWzQ,KAAKyN,MAAM8C,QAAQ6D,MAC9B8E,WAJC5C,kBCVEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAjV,EAAAkV,cAACuE,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7U,KAAK,SAAA8U,GACjCA,EAAaC","file":"static/js/main.9e97add1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nexport const TILE_TYPE = {\r\n    CLICKED: \"click\",\r\n    UNCLICKED: \"notClicked\",\r\n    FLAG: \"flag\",\r\n    REVEALED_MINE: \"mine\",\r\n}\r\n\r\nexport const  MIN_BOARD_WIDTH=400\r\nexport const MIN_TILE_SIZE=30\r\n\r\nexport const MAX_OBJ_SIZE_IN_DB = 5000;\r\n\r\nexport const MAX_WIDTH=300;\r\nexport const MAX_HEIGHT=300;\r\n","import * as localforage from \"localforage\";\r\n\r\nexport function setCCGroupForCell(key,CC) {\r\n    sessionStorage.setItem(key, CC)\r\n}\r\n\r\nexport function getCCGroupForCell(key) {\r\n    return sessionStorage.getItem(key)\r\n}\r\n\r\nexport function getNumberOfEntries(CC) {\r\n    return localforage.getItem(CC)\r\n}\r\nexport function setNumberOfEntries(CC,parts) {\r\n\r\n    localforage.setItem(CC, parts);\r\n}\r\n\r\nexport function getAllCCforCCkey(key) {\r\n  return  localforage.getItem(key);\r\n}\r\nexport function saveCCGroup(key,CCgroup) {\r\n    //console.log(\"localfr\")\r\n    if(Object.keys(CCgroup).length<2){\r\n        debugger\r\n    }\r\n    localforage.setItem(key, CCgroup);\r\n}\r\n\r\n\r\nexport async function clearStorage() {\r\n  await localforage.clear();\r\n    sessionStorage.clear();\r\n}","import {MAX_HEIGHT, MAX_WIDTH} from \"../../consts\";\r\nimport {saveCCGroup} from \"../storageController\";\r\n\r\nexport function getSetOfRandomsInRange(min, max, n) {\r\n    if (max - min < n) {\r\n        return;  // todo  throw exception?\r\n    }\r\n    const resultSet = new Set();\r\n    let counter = 0;\r\n    while (resultSet.size < n) {\r\n        resultSet.add(getRandomInt(min, max + 1));\r\n        counter++;\r\n        if (counter > n * 100000) {\r\n            throw \"Something went very wrong\"  // counter is just for safety, getRandomInt should work\r\n        }\r\n    }\r\n    return resultSet\r\n}\r\n\r\nfunction getRandomInt(min, max) { //stolen from developer.mozilla\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nexport function getKey(i, j) {\r\n    const key = `${i}-${j}`;\r\n    return key\r\n}\r\n\r\nexport function isValidGameParams(width, height, minesNumber) {\r\n    return width < MAX_WIDTH + 1 && height < MAX_HEIGHT + 1\r\n        && minesNumber < width * height && width > 0 && height > 0 && minesNumber > 0\r\n}\r\n\r\n\r\nexport function flushCCCells(key, CCCells) {\r\n    saveCCGroup(key, CCCells);\r\n}\r\n\r\nexport function getBoundreis(row, column, height, width) {\r\n    return {\r\n        top: Math.max(0, row - 1),\r\n        bottom: Math.min(row + 1, height - 1),\r\n        right: Math.min(column + 1, width - 1),\r\n        left: Math.max(0, column - 1),\r\n    }\r\n}\r\n\r\n\r\nexport function generateEmptyBoard(width, height, initValue) {\r\n    const row = new Array(width).fill(initValue);\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        board.push([...row]);\r\n    }\r\n    return board;\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {\r\n    flushCCCells,\r\n    generateEmptyBoard,\r\n    getBoundreis,\r\n    getKey,\r\n    getSetOfRandomsInRange,\r\n    isValidGameParams\r\n} from \"./utils/utils\";\r\nimport {\r\n    clearStorage,\r\n    getAllCCforCCkey,\r\n    getCCGroupForCell,\r\n    getNumberOfEntries,\r\n    saveCCGroup,\r\n    setNumberOfEntries\r\n} from \"./storageController\";\r\nimport {MAX_HEIGHT, MAX_OBJ_SIZE_IN_DB, MAX_WIDTH} from \"../consts\";\r\n\r\nexport class MineSweeperStore {\r\n\r\n    @observable superman = false;\r\n    minesLocation = new Set();\r\n    clickedCells = {}\r\n    flaggedCells = {}\r\n    correctFlags=0;\r\n    @observable flags = 0;\r\n    @observable openedCells = 0;\r\n    @observable numberOfClicks = 0;\r\n    @observable gameNumber = 0;\r\n    boardSize = -1;\r\n    @observable width = -1;\r\n    @observable height = -1;\r\n    @observable loading = false;\r\n    @observable displayWaring = false;\r\n    @observable lost = false;\r\n    emptyCellsMapped = false\r\n    minesNumber=0\r\n    // @observable won=false\r\n    index2CC = {}\r\n\r\n    @computed get revealBoard() {\r\n        return this.superman || this.won || this.lost\r\n    }\r\n\r\n    @action hideWarning = () => {\r\n        this.displayWaring = false\r\n    }\r\n\r\n    @action setPercentage = (per) => {\r\n        if (this.percantage < per) {\r\n            this.percantage = per\r\n        }\r\n    }\r\n\r\n    solveGame = async () => {\r\n        let CCKey = 0;\r\n        const solveGameScheduler = async () => {\r\n            for (let i = 0; i < this.height; i++) {\r\n                //  this.setPercentage(Math.floor((CCKey * 100) / this.boardSize))\r\n                for (let j = 0; j < this.width; j++) {\r\n                    CCKey++;\r\n                    if (!this.index2CC[(getKey(i, j))]) {\r\n                        await this.markConnectedComponnetsSolve(i, j, CCKey)\r\n                    }\r\n                }\r\n            }\r\n            return Promise.resolve(\"Game solved\")\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    solveGameScheduler().then(r => resolve(\"resolved\"))\r\n                }, 0);\r\n            }\r\n        )\r\n\r\n    };\r\n\r\n    @action clickCell = (key) => {\r\n        this.clickedCells[key] = true\r\n        this.increaseClicks();\r\n    }\r\n\r\n    shouldVisitCell = (key, i, j) => {\r\n        return !this.clickedCells[key] && this.calculateAdjMines(i, j) === 0\r\n    }\r\n\r\n    @action clickConnectedCells = (row, column) => {\r\n        const visitedCells = [];\r\n        visitedCells.push({row, column});\r\n        this.clickCell(getKey(row, column));\r\n        while (visitedCells.length > 0) {\r\n            const cellIndex = visitedCells.shift()\r\n            const {row, column} = cellIndex\r\n            const boundary = getBoundreis(row, column, this.height, this.width);\r\n\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j)\r\n                    if (this.shouldVisitCell(key, i, j)) {\r\n                        visitedCells.push({row: i, column: j})\r\n                    }\r\n                    this.clickCell(key)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearAll = async () => {\r\n        this.clickedCells = {};\r\n        this.minesLocation = {};\r\n        this.emptyCellsLocation = {};\r\n        this.flaggedCells = {};\r\n        this.index2CC = {};\r\n        this.flags = 0;\r\n        this.correctFlags=0;\r\n        this.openedCells = 0;\r\n        this.numberOfClicks=0;\r\n        this.minesNumber=0;\r\n        this.lost = false;\r\n        //  this.won=false\r\n        await clearStorage();\r\n    };\r\n\r\n    @action initGameState = async (width, height, minesNumber) => {\r\n        await this.clearAll();\r\n        this.minesNumber=minesNumber;\r\n        if (this.emptyCellsMapped) {\r\n            this.placeEmptyCells(width, height, minesNumber)\r\n        } else {\r\n            this.placeMines(width, height, minesNumber);\r\n        }\r\n        return this.solveGame()\r\n        //              var t1 = performance.now();\r\n//                console.log(\"to start took \" + (t1 - t0) + \" milliseconds.\")\r\n    };\r\n\r\n    chooseBetweenMinesAndEmptyCells = (minesNumber) => {\r\n        if (minesNumber > (MAX_HEIGHT * MAX_WIDTH) / 2) {\r\n            this.emptyCellsMapped = true\r\n        }\r\n    }\r\n\r\n    @action newGame = (width, height, minesNumber) => {\r\n        if (!isValidGameParams(width, height, minesNumber)) {\r\n            return //todoshould display warning\r\n        }\r\n        this.chooseBetweenMinesAndEmptyCells(minesNumber)\r\n        this.setLoading(true)\r\n        this.setBoardParams(width, height);\r\n        this.initGameState(width, height, minesNumber).then(res => {\r\n                this.setLoading(false)\r\n            }\r\n        )\r\n    };\r\n\r\n    calculateAdjMines = (row, column) => {\r\n        const boundary = getBoundreis(row, column, this.height, this.width);\r\n        let mineCount = 0;\r\n        for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n            for (let j = boundary.left; j <= boundary.right; j++) {\r\n                if (this.isAMine(i, j)) {\r\n                    mineCount++;\r\n                }\r\n            }\r\n        }\r\n        return mineCount;\r\n    };\r\n\r\n    markConnectedComponnetsSolve = (row, column, CC, visitedCells = [], CCCells = {}, parts = 1, numOfCCItems = 0) => {\r\n        visitedCells.push({row, column})\r\n        const indexKey = getKey(row, column);\r\n        this.index2CC[indexKey] = CC.toString()\r\n        CCCells[indexKey] = true;\r\n        numOfCCItems++;\r\n        let loops = 0;\r\n        while (loops < 400 && visitedCells.length > 0) {\r\n            loops++;\r\n            const cellIndex = visitedCells.shift();\r\n            const {row, column} = cellIndex;\r\n            if (numOfCCItems > MAX_OBJ_SIZE_IN_DB) {\r\n                const key = `${CC}-${parts}`;\r\n                flushCCCells(key, CCCells)\r\n                CCCells = {};\r\n                parts++;\r\n                numOfCCItems = 0;\r\n            }\r\n            const boundary = getBoundreis(row, column, this.height, this.width)\r\n            for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n                for (let j = boundary.left; j <= boundary.right; j++) {\r\n                    const key = getKey(i, j);\r\n                    const isSaved = this.index2CC[key]\r\n                    if (!isSaved) {\r\n                        this.index2CC[key] = CC.toString()\r\n                        if (this.calculateAdjMines(i, j) === 0) {\r\n                            visitedCells.push({row: i, column: j})\r\n                        }\r\n                        CCCells[key] = true;\r\n                        numOfCCItems++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (visitedCells.length < 1) {\r\n            const storageKey = `${CC}-${parts}`;\r\n            if ((Object.keys(CCCells).length + ((parts - 1) * MAX_OBJ_SIZE_IN_DB)) >= MAX_OBJ_SIZE_IN_DB) {\r\n                flushCCCells(storageKey, CCCells);\r\n                setNumberOfEntries(CC.toString(), parts)\r\n            }\r\n            return new Promise((resolve, reject) => resolve(\"good promise\"))\r\n        }\r\n\r\n        const cell = visitedCells.shift()\r\n        return new Promise(resolve => setTimeout(() => {\r\n            this.markConnectedComponnetsSolve(cell.row,\r\n                cell.column, CC, visitedCells, CCCells, parts, numOfCCItems).then(x => resolve(x))\r\n        }, 0))\r\n\r\n    };\r\n\r\n    // markConnectedComponnetsSolve = (row, column, CC, cellsQueue = [], discoverdCells = {}, parts = 1, numOfCCItems = 0) => {\r\n    //     //const cellsQueue = [];\r\n    //     cellsQueue.push({row, column})\r\n    //     const indexKey = getKey(row, column);\r\n    //     // let discoverdCells = {}\r\n    //     //let parts = 1;\r\n    //     //let numOfCCItems = 0;\r\n    //     //setCCGroupForCell(indexKey, CC.toString());// save CC for each item\r\n    //     discoverdCells[indexKey] = true;\r\n    //     numOfCCItems++;\r\n    //     let loops = 0;\r\n    //     //  const loop = () => {\r\n    //     while (loops < 100 && cellsQueue.length > 0) {\r\n    //       //  console.log(\"s\")\r\n    //         loops++;\r\n    //         const cellIndex = cellsQueue.shift()\r\n    //         const {row, column} = cellIndex\r\n    //         if (numOfCCItems % MAX_OBJ_SIZE_IN_DB === 0) {\r\n    //             const key = `${CC}-${parts}`\r\n    //             saveCCGroup(key, discoverdCells);\r\n    //             for (let cell in discoverdCells) {\r\n    //                 //console.log(cell)\r\n    //                 setCCGroupForCell(cell, CC.toString())\r\n    //             }\r\n    //             discoverdCells = {};\r\n    //             parts++;\r\n    //         }\r\n    //         const boundary = getBoundreis(row, column, this.height, this.width)\r\n    //         for (let i = boundary.top; i <= boundary.bottom; i++) {\r\n    //             for (let j = boundary.left; j <= boundary.right; j++) {\r\n    //                 const key = getKey(i, j);\r\n    //                 const isDiscovered = parts > 1 ? getCCGroupForCell(key) : discoverdCells[key] // flushed to db ro not\r\n    //                 //  const isSaved = getCCGroupForCell(key);\r\n    //                 if (!isDiscovered) {\r\n    //                    // setCCGroupForCell(key, CC.toString());\r\n    //                     if (this.calculateAdjMines(i, j) === 0) {\r\n    //                         cellsQueue.push({row: i, column: j})\r\n    //                     }\r\n    //                     discoverdCells[key] = true;\r\n    //                     numOfCCItems++;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     let promise = new Promise(resolve => resolve(\"bad promise\"))\r\n    //     if (cellsQueue.length < 1) {\r\n    //         const storageKey = `${CC}-${parts}`;\r\n    //         if (Object.keys(discoverdCells).length > 300 || parts > 1) {\r\n    //             for (let cell in discoverdCells) {\r\n    //                 //console.log(cell)\r\n    //                 setCCGroupForCell(cell, CC.toString())\r\n    //             }\r\n    //             saveCCGroup(storageKey, discoverdCells);\r\n    //             setNumberOfEntries(CC.toString(), parts)\r\n    //         }\r\n    //         promise = new Promise((resolve, reject) => resolve(\"good promise\"))\r\n    //     } else {\r\n    //         const {row, column} = cellsQueue.shift()\r\n    //         promise = new Promise(resolve => setTimeout(() => {\r\n    //             this.markConnectedComponnetsSolve(row,\r\n    //                 column, CC, cellsQueue, discoverdCells, parts, numOfCCItems).then(x => resolve(x))\r\n    //         }, 0))\r\n    //     }\r\n    //     return promise\r\n    // };\r\n\r\n    @action clickAllCCfromStorage = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        const CC = this.index2CC[key]\r\n        const parts = await getNumberOfEntries(CC)\r\n\r\n        for (let i = 1; i <= parts; i++) {\r\n            const key = `${CC}-${i}`\r\n            const cc = await getAllCCforCCkey(key)\r\n            Object.assign(this.clickedCells, cc)\r\n        }\r\n        this.numberOfClicks++;\r\n    };\r\n\r\n\r\n\r\n    getCCid = (key) => {\r\n        return this.index2CC[key]\r\n    }\r\n\r\n    isCCForCellinStorage = async (key) => {\r\n        const CC = this.getCCid(key)\r\n        return CC && await getNumberOfEntries(CC)\r\n    }\r\n\r\n    @action\r\n    handleClickEmptyTile = async (row, column) => {\r\n        const key = getKey(row, column)\r\n        if (this.calculateAdjMines(row, column) === 0) {\r\n            const isInStorage = await this.isCCForCellinStorage(key)\r\n            if (isInStorage) {\r\n                this.clickAllCCfromStorage(row, column)\r\n            } else {\r\n                this.clickConnectedCells(row, column)\r\n            }\r\n        }\r\n        this.clickedCells[key] = true;\r\n        this.openedCells=Object.keys(this.clickedCells).length\r\n\r\n    };\r\n\r\n    @action\r\n    handleClickMine = (i, j) => {\r\n        this.lost = true;\r\n    };\r\n\r\n    cleanUpAfterFlagRemoved=(key)=>{\r\n         if(this.clickedCells[key]){\r\n             delete this.clickedCells[key]\r\n             this.openedCells--;\r\n         }\r\n    }\r\n\r\n    @action removeFlag = (i,j) => {\r\n        const key=getKey(i,j)\r\n        if(this.isFlagCorrect(i,j)){\r\n            this.correctFlags--\r\n        }\r\n        delete this.flaggedCells[key];\r\n        this.flags--;\r\n        this.cleanUpAfterFlagRemoved(key)\r\n    }\r\n\r\n    isFlagCorrect=(i,j)=>{\r\n        return this.isAMine(i,j)\r\n    }\r\n\r\n    @action addFlag = (i,j) => {\r\nconst key=getKey(i,j)\r\n        if(this.isFlagCorrect(i,j)){\r\n            this.correctFlags++;\r\n        }\r\n        this.flags++\r\n        this.flaggedCells[key] = true\r\n\r\n    }\r\n\r\n    @action\r\n    toggleFlag = (i, j) => {\r\n        const key = getKey(i, j);\r\n        const flagged = this.flaggedCells[key];\r\n        if (flagged) {\r\n            this.removeFlag(i,j)\r\n            return;\r\n        }\r\n        if (this.remainingFlags() > 0) {\r\n            this.addFlag(i,j)\r\n        } else {\r\n            this.displayWaring = true\r\n        }\r\n    };\r\n\r\n    @action\r\n    increaseClicks = () => {\r\n        this.numberOfClicks++\r\n    };\r\n\r\n    handleClickTile = (i, j, shiftPressed) => {\r\n        if (this.superman) {\r\n            return\r\n        }\r\n        const key = getKey(i, j);\r\n        if (this.clickedCells[key] && !this.flaggedCells[key]) {\r\n            return;\r\n        }\r\n        this.increaseClicks();\r\n        if (shiftPressed) {\r\n            this.toggleFlag(i, j);\r\n            return\r\n        }\r\n        if(this.flaggedCells[key]){\r\n            return\r\n        }\r\n        if (this.isAMine(i, j)) {\r\n            this.handleClickMine(i, j);\r\n            return;\r\n        }\r\n        this.handleClickEmptyTile(i, j);\r\n    };\r\n\r\n\r\n    @action setLoading = (loading) => {\r\n        this.loading = loading\r\n    };\r\n\r\n    isAMine = (i, j) => {\r\n        return this.emptyCellsMapped?\r\n            !this.emptyCellsLocation.has(i * this.width + j) :this.minesLocation.has(i * this.width + j)\r\n    };\r\n\r\n    @computed get won() {\r\n        return this.correctFlags + this.openedCells === this.boardSize\r\n    };\r\n\r\n    remainingFlags() {\r\n        return this.minesNumber - this.flags\r\n    }\r\n\r\n    @action\r\n    setBoardParams = (width, height, minesNumber) => {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.boardSize = width * height;\r\n        this.mines = minesNumber;\r\n    }\r\n\r\n    @action\r\n    toggleSuperman = () => {\r\n        this.superman = !this.superman\r\n    };\r\n\r\n    placeMines = (width, height, minesNumber) => {\r\n        this.minesLocation = getSetOfRandomsInRange(0, width * height - 1, minesNumber)\r\n    }\r\n\r\n    placeEmptyCells = (width, height, minesNumber) => {\r\n        const size = width * height\r\n        this.emptyCellsLocation = getSetOfRandomsInRange(0, width * height - 1, size - minesNumber)\r\n\r\n    };\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const RedFlag = function (props) {\r\n    return <svg id=\"Layer_1\"\r\n                x=\"0px\" y=\"0px\" viewBox=\"0 0 511.999 511.999\" style={\r\n                    {enableBackground:\"new 0 0 511.999 511.999\",width:props.width,height:props.height}}>\r\n<path style={{fill:\"#E21B1B\"}}\r\n      d=\"M103.919,51.744c0,0,41.296,33.496,109.008,18.4c64.2-14.264,124.056-30.464,224.616,5.856v215.032  c0,0-92.488-44.104-176.736-24.432s-131.88,12.12-156.888-12.888\"/>\r\n        <rect x=\"90.74\" y=\"37.524\" style={{fill:\"#999999\"}} width=\"16\" height=\"474.475\"/>\r\n        <circle style={{fill:\"#666666\"}} cx=\"98.741\" cy=\"24.284\" r=\"24.284\"/>\r\n</svg>\r\n\r\n}","import * as React from \"react\"\r\n\r\nexport const Bomb=function (props) {\r\n  //  const {width=\"90%\",height=\"90%\"}={props}\r\n    return <svg  id=\"Layer_1\" x=\"0px\" y=\"0px\" width={props.width} height={props.height} viewBox=\"0 0 512 512\" enableBackground=\"new 0 0 512 512\" >\r\n<g>\r\n\t<path d=\"M218.255,131.197c16.958,0,33.379,2.285,48.987,6.542V91.448h-92.995v45.008   C188.357,133.027,203.091,131.197,218.255,131.197z\"/>\r\n    <circle fill=\"#020202\" cx=\"218.255\" cy=\"316.947\" r=\"171.502\"/>\r\n    <path fill=\"none\" stroke=\"#000000\" strokeWidth=\"10\" strokeMiterlimit=\"10\" d=\"M218.255,108.849c0,0-6.776-113.407,92.398-60   c79.104,42.599,117,17,117,17\"/>\r\n    <polygon points=\"422.598,23.551 430.759,46.499 452.756,36.042 442.3,58.04 465.247,66.2 442.3,74.36 452.756,96.358    430.759,85.901 422.598,108.849 414.438,85.901 392.441,96.358 402.897,74.36 379.948,66.2 402.897,58.04 392.441,36.042    414.438,46.499  \"/>\r\n</g>\r\n</svg>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"./assets/RedFlag\";\r\nimport {Bomb} from \"./assets/Bomb\";\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {TILE_TYPE} from \"../consts\";\r\n\r\nconst styles = theme => ({\r\n\r\n    tile: {\r\n        textAlign:\"center\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        boxSizing:\"border-box\",\r\n\r\n    },\r\n    unrevealedTile:{\r\n\r\n        '&:hover': {\r\n            backgroundColor: \"#b3e652\",\r\n        },\r\n    },\r\n    unrevealed0:{\r\n        backgroundColor: \"#a2d149\",\r\n\r\n    },\r\n    unrevealed1:{\r\n        backgroundColor: \"#aad751\",\r\n    },\r\n    emptyTile:{\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n\r\n    },\r\n    empty0:{\r\n        backgroundColor:\"#d7b899\",\r\n    },\r\n    empty1:{\r\n        backgroundColor:\"#e5c29f\",\r\n    },\r\n    revealed: {\r\n        backgroundColor: \"#FFFAFA\"\r\n\r\n    },\r\n    adj1: {\r\n        color: \"#005EFF\"\r\n    },\r\n    adj2: {\r\n        color: \"#56CD56\"\r\n    },\r\n    adj3: {\r\n        color: \"#FFAB00\"\r\n    },\r\n    adj4: {\r\n        color: \"#FF3300\"\r\n    },\r\n    adj5: {\r\n        color: \"#FF0044\"\r\n    },\r\n\r\n});\r\n\r\n\r\nconst FlaggedTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><RedFlag width={\"70%\"}/></UnrevealedTile>\r\n}\r\n\r\nconst MineTile = function (props) {\r\n    return <UnrevealedTile colorType={props.colorType}><Bomb width={\"70%\"}/></UnrevealedTile>\r\n}\r\n\r\nconst UnrevealedTile = withStyles(styles)(function (props) {\r\n    const colorType=props.colorType\r\n    const classes=props.classes\r\n    const colorClass=props.classes[`unrevealed${colorType}`]\r\n    return <div className={[classes.tile,classes.unrevealedTile, colorClass].join(' ')}>{props.children}</div>\r\n})\r\n\r\nconst EmptyTile = withStyles(styles)(function (props) {\r\n    const colorClass=props.classes[`empty${ props.colorType}`]\r\n    return <div className={[props.classes.emptyTile,colorClass].join(' ')} >{props.children}</div>\r\n})\r\n\r\n\r\nconst ClickedTile = withStyles(styles)(function (props) {\r\n    const {adjMines} = props\r\n    const className = adjMines > 5 ? props.classes.adj5 : props.classes[`adj${adjMines}`]// (function () {\r\n    return <div className={[props.classes.tile, className].join(\" \")}>\r\n        <EmptyTile colorType={props.colorType}>{adjMines > 0 && adjMines}</EmptyTile></div>\r\n})\r\n\r\nexport class GameTile extends React.PureComponent {\r\n    render() {\r\n        console.log(\"tile\")\r\n        return (() => {\r\n            switch (this.props.cellState) {\r\n                case TILE_TYPE.FLAG:\r\n                    return <FlaggedTile colorType={this.props.colorType} />;\r\n                case TILE_TYPE.REVEALED_MINE:\r\n                    return <MineTile colorType={this.props.colorType} />\r\n                case TILE_TYPE.UNCLICKED:\r\n                    return <UnrevealedTile colorType={this.props.colorType}/>\r\n                case TILE_TYPE.CLICKED:\r\n                    return <ClickedTile colorType={this.props.colorType} adjMines={this.props.adj}/>;\r\n                default:\r\n                    return null;\r\n            }\r\n        })()\r\n    }\r\n\r\n};","import * as React from \"react\"\r\nimport {Grid} from \"react-virtualized\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {GameTile} from \"./GameTile\";\r\nimport {getKey} from \"./utils/utils\";\r\nimport {MIN_BOARD_WIDTH, MIN_TILE_SIZE, TILE_TYPE} from \"../consts\";\r\n\r\n@inject('GameStore')\r\n@observer\r\nclass GameBoard extends React.Component {\r\n\r\n    computeCell = (i, j) => {\r\nconsole.log(\"compute\",i,j)\r\n        const store = this.props.GameStore\r\n        if(store.loading){\r\n            return TILE_TYPE.UNCLICKED\r\n        }\r\n        const key = getKey(i, j)\r\n\r\n        const clicked = store.revealBoard || store.clickedCells[key]\r\n\r\n        if (store.isAMine(i, j) && clicked) {\r\n            return TILE_TYPE.REVEALED_MINE\r\n        }\r\n        if (store.flaggedCells[key] && !store.revealBoard) {\r\n            return TILE_TYPE.FLAG\r\n        }\r\n        return clicked ? TILE_TYPE.CLICKED : TILE_TYPE.UNCLICKED\r\n\r\n    }\r\n\r\n    cellRenderer = ({columnIndex, key, rowIndex, style}) => {\r\n        const {GameStore} = this.props\r\n        console.log(\"cellRen\")\r\n        const cellType = this.computeCell(rowIndex, columnIndex) //GameStore.board[rowIndex][columnIndex]\r\n        const adj = cellType === TILE_TYPE.CLICKED ? GameStore.calculateAdjMines(rowIndex, columnIndex) : -1;\r\n        const colorType = (rowIndex + columnIndex) % 2\r\n        return <div className=\"tile\" id={`${rowIndex}-${columnIndex}`} key={key} style={style}>\r\n            <GameTile colorType={colorType} adj={adj} cellState={cellType}/>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        const store = this.props.GameStore\r\n        const tableH = Math.min(store.height,20)\r\n        const tableW = Math.min(store.width,20)\r\n        const superman = store.superman\r\n        console.log(\"render\",)\r\n        const TILE_SIZE = (MIN_BOARD_WIDTH / tableW) < MIN_TILE_SIZE ? MIN_TILE_SIZE :Math.floor( MIN_BOARD_WIDTH / tableW)\r\n        console.log(MIN_BOARD_WIDTH,tableW,TILE_SIZE)\r\n        const numClicks = store.numberOfClicks // this is for rerender\r\n        return <Grid cellRenderer={this.cellRenderer}\r\n                     columnCount={store.width}\r\n                     style={{outline: 'none'}}\r\n                     rowCount={store.height}\r\n                     columnWidth={TILE_SIZE}\r\n                     height={tableH * TILE_SIZE}\r\n                     width={tableW * TILE_SIZE}\r\n                     rowHeight={TILE_SIZE}\r\n                     clicks={numClicks}\r\n                     superman={superman}\r\n        >\r\n        </Grid>\r\n    }\r\n}\r\n\r\nexport default GameBoard","import * as React from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport const GameSettings = (props) => {\r\n\r\n    function handleKeyPress(ev){\r\n        console.log(\"key\",ev)\r\n        if(ev.key===\"Enter\"){\r\n            props.handleNewGame()\r\n        }\r\n\r\n    }\r\n    return <div id='b' style={{display:\"flex\",alignItems:\"flex-end\",flexDirection:\"column\"}} onKeyPress={handleKeyPress}>\r\n        <TextField\r\n            id=\"gameWidth\"\r\n            label=\"Columns\"\r\n            placeholder=\"6\"\r\n            type=\"number\"\r\n            multiline\r\n            margin=\"normal\"\r\n            // variant=\"outlined\"\r\n            value={props.gameWidth}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Rows\"\r\n            placeholder=\"6\"\r\n            type=\"number\" id=\"gameHeight\"\r\n            multiline\r\n            margin=\"normal\"\r\n            value={props.gameHeight}\r\n            onChange={props.handleInput}\r\n        />\r\n        <TextField\r\n            label=\"Mines\"\r\n            placeholder=\"6\"\r\n            multiline\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            id=\"mines\"\r\n            onChange={props.handleInput}\r\n            value={props.mines}\r\n        />\r\n\r\n\r\n    </div>\r\n}","import * as React from \"react\"\r\nimport {RedFlag} from \"./assets/RedFlag\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontSize:\"16px\",\r\n        width:\"fit-content\",\r\n        whiteSpace: \"nowrap\",\r\n     //   backgroundColor:\"#3A4146\",\r\n        height: \"50px\",\r\n        padding:\"4px\",\r\n\r\n    }\r\n});\r\nexport const FlagsLeft = withStyles(styles)(function (props) {\r\n    return <div className={props.classes.root}>\r\n        <RedFlag width={\"20px\"}/>\r\n            {` X${props.flags}`}\r\n\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    dialogPaper: {\r\n        minHeight: '20vh',\r\n        maxHeight: '40vh',\r\n        minWidth: \"30vw\",\r\n        maxWidth: \"50vw\",\r\n        backgroundColor:\"white\",\r\n        opacity:\"0.5\",\r\n        border:\"double\",\r\n        borderWidth:\"4px\"\r\n    },\r\n};\r\n\r\n@withStyles(styles)\r\nclass AlertDialog extends React.Component {\r\n\r\n    render() {\r\n        const {text,title}=this.props\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={this.props.open}\r\n                    onClose={this.props.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                    classes={{paper: this.props.classes.dialogPaper}}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className={this.props.dialog} id=\"alert-dialog-description\">\r\n                          {text}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.props.handleOk} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlertDialog;","import * as React from \"react\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\n\r\nexport const Superman=(props)=>{\r\n    return  <div style={{display:\"flex\",alignItems:\"center\",paddingLeft:\"10px\"}}>\r\n    <FormControlLabel\r\n        control={\r\n            <Checkbox onChange={props.toggle} icon={<FavoriteBorder />} checkedIcon={<Favorite />} value={props.value} />\r\n        }\r\n    />\r\n    <div style={{position:\"relative\",right:\"20px\"}}>Superman</div>\r\n    </div>\r\n}","import * as React from \"react\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport {GameSettings} from \"./GameSettings\";\r\nimport {FlagsLeft} from \"./FlagsLeft\";\r\nimport AlertDialog from \"./assets/AlertDialog\";\r\nimport CircularProgressbar from \"react-circular-progressbar\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport {Superman} from \"./SupermanCheckbox\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst styles = theme => ({\r\n\r\n    root: {\r\n        display: \"grid\",\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n        gridTemplateColumns: \"minmax(80px,min-content) min-content\",\r\n    }\r\n});\r\n\r\n@inject('GameStore')\r\n@withStyles(styles)\r\n@observer\r\nclass MineSweeperGame extends React.Component {\r\n    state = {\r\n        gameHeight: 6,\r\n        gameWidth: 6,\r\n        mines: 2,\r\n    }\r\n\r\n    startGame = () => { // needs to be from container\r\n        const {GameStore} = this.props;\r\n        GameStore.newGame(this.state.gameWidth, this.state.gameHeight, this.state.mines)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        // ev.preventDefault();\r\n        this.startGame()\r\n    }\r\n\r\n\r\n    handleTileClick = (ev) => {\r\n        const tile = ev.target.closest('.tile')\r\n        if (!tile || this.props.GameStore.loading) {\r\n            return\r\n        }\r\n        const [rowIndex, columnIndex] = tile.id.split(\"-\");\r\n        if (!rowIndex || !columnIndex) {\r\n            return\r\n        }\r\n        this.props.GameStore.handleClickTile(parseInt(rowIndex), parseInt(columnIndex), ev.shiftKey)\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const val = parseInt(ev.target.value)\r\n        this.setState({[ev.target.id]: val ? val : ''});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"game\")\r\n        const {GameStore} = this.props;\r\n        const won=GameStore.won\r\n        console.log(won)\r\n        const wonDialog =\r\n            <AlertDialog open={GameStore.won} handleOk={this.startGame} text=\"Can you do it again?\" title={\"Woohoo!\"}/>\r\n        const lostDialog =\r\n            <AlertDialog open={GameStore.lost} handleOk={this.startGame} text=\"Let's try again!\" title={\"Boom :(\"}/>\r\n        const noFlagsDialog =\r\n            <AlertDialog title=\"Out of flags\"\r\n                         handleOk={GameStore.hideWarning}\r\n                         open={GameStore.displayWaring} handleClose={GameStore.hideWarning}/>\r\n        return <div className={this.props.classes.root} onClick={this.handleTileClick}>\r\n            <div style={{ gridColumn: \"1\" ,gridRow:\"2/3\",background:\"#b648f2\",padding:\"12px\"}}>\r\n                <GameSettings handleNewGame={this.handleNewGame}\r\n                              handleInput={this.handleInput} gameHeight={this.state.gameHeight}\r\n                              gameWidth={this.state.gameWidth}\r\n                              mines={this.state.mines}/>\r\n            </div>\r\n            <div style={{color:\"white\",gridRow: \"1\", gridColumn:\"2/4\",alignitems:\"center\", display:\"flex\",justifyContent:\"space-between\",background:\"#4a752c\"}}>\r\n                <Superman toggle={GameStore.toggleSuperman}/>\r\n                <FlagsLeft flags={GameStore.minesNumber - GameStore.flags}/>\r\n\r\n            </div>\r\n            <div  style={{gridRow:\"1\",gridColumn:\"1\",background:\"#ffcd1a\"}}>\r\n                <Button style={{height:\"100%\",width:\"100%\",color:\"white\"}} color=\"inherit\" onClick={this.handleNewGame}>\r\n                    Go!\r\n                </Button>\r\n            </div>\r\n            <div style={{gridRow: \"2/3 \", gridColumn: \"2\"}}>\r\n                {GameStore.loading && <LinearProgress/>}\r\n                     <GameBoard/>\r\n            </div>\r\n            {wonDialog}\r\n            {lostDialog}\r\n            {noFlagsDialog}\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default MineSweeperGame","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Provider} from \"mobx-react\";\nimport {MineSweeperStore} from \"./mineSweeperGame/MineSweeperStore\";\nimport MineSweeperGame from \"./mineSweeperGame/MineSweeperGame\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst gameStore = new MineSweeperStore();\nconst MineSweeper = (<Provider GameStore={gameStore}><MineSweeperGame/></Provider>);\n\nconst styles = theme => ({\n\n    root:{\n        backgroundColor:\"#2E3439\",\n        minHeight:\"100vh\",\n        display:\"flex\",\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    }\n})\n@withStyles(styles)\nclass App extends Component {\n    render() {\n        return (\n            <div className={this.props.classes.root}>\n                {MineSweeper}\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}